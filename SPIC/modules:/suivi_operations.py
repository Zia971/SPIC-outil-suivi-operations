"""
Module principal de suivi des op√©rations SPIC 2.0
Vue portefeuille, timeline, vue manager, CRUD op√©rations
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional
import logging

import config
import database
from utils import *
from utils.form_utils import FormComponents
from utils.db_utils import DatabaseUtils
from utils.constants import UI_MESSAGES

logger = logging.getLogger(__name__)

def show_suivi_operations(db_manager, user_session: Dict):
    """Interface principale de suivi des op√©rations"""
    
    st.header("üèóÔ∏è Suivi des Op√©rations")
    
    # Navigation par onglets
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìã Portefeuille", 
        "üìä Vue Manager", 
        "üéØ Timeline", 
        "‚ûï Nouvelle Op√©ration"
    ])
    
    # Utilitaires DB
    db_utils = DatabaseUtils(db_manager)
    
    with tab1:
        show_portfolio_view(db_manager, db_utils, user_session)
    
    with tab2:
        show_manager_view(db_manager, db_utils, user_session)
    
    with tab3:
        show_timeline_view(db_manager, db_utils, user_session)
    
    with tab4:
        show_new_operation_form(db_manager, db_utils, user_session)

def show_portfolio_view(db_manager, db_utils, user_session: Dict):
    """Vue portefeuille avec filtres et recherche"""
    
    st.subheader("üìã Portefeuille d'Op√©rations")
    
    # Barre de recherche
    col1, col2 = st.columns([3, 1])
    
    with col1:
        search_query = FormComponents.search_bar("Rechercher par nom, adresse, secteur...")
    
    with col2:
        if st.button("üîÑ Actualiser"):
            st.cache_data.clear()
            st.experimental_rerun()
    
    # R√©cup√©rer les op√©rations
    user_id = user_session.get('user_id')
    
    try:
        if search_query:
            operations = db_utils.search_operations(search_query, user_id)
        else:
            operations = db_manager.get_all_operations(user_id)
        
        operations_df = pd.DataFrame(operations) if operations else pd.DataFrame()
        
    except Exception as e:
        st.error(f"Erreur chargement op√©rations: {e}")
        operations_df = pd.DataFrame()
    
    if operations_df.empty:
        st.info("üìã Aucune op√©ration trouv√©e")
        return
    
    # Filtres sidebar
    with st.sidebar:
        st.header("üîç Filtres")
        filters = FormComponents.filters_sidebar(operations_df)
    
    # Appliquer filtres
    filtered_df = apply_portfolio_filters(operations_df, filters)
    
    # M√©triques r√©sum√©
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        create_metric_card(
            "Total Op√©rations", 
            len(filtered_df),
            help_text="Nombre total d'op√©rations"
        )
    
    with col2:
        actives = len(filtered_df[filtered_df['statut_global'] == 'EN_COURS'])
        create_metric_card(
            "En Cours", 
            actives,
            help_text="Op√©rations actives"
        )
    
    with col3:
        if 'budget_initial' in filtered_df.columns:
            budget_total = filtered_df['budget_initial'].fillna(0).sum()
            create_metric_card(
                "Budget Total", 
                format_number_french(budget_total) + "‚Ç¨",
                help_text="Budget total portefeuille"
            )
    
    with col4:
        if 'score_risque' in filtered_df.columns:
            score_moyen = filtered_df['score_risque'].fillna(0).mean()
            create_metric_card(
                "Score Risque Moyen", 
                f"{score_moyen:.0f}/100",
                help_text="Score de risque moyen"
            )
    
    # Table des op√©rations
    st.subheader("üìä Liste des Op√©rations")
    
    # Pr√©parer colonnes d'affichage
    display_columns = prepare_operations_display(filtered_df)
    
    # Configuration de l'√©diteur
    column_config = {
        "nom": st.column_config.TextColumn("Nom", width="medium"),
        "type_operation": st.column_config.TextColumn("Type", width="small"),
        "statut_display": st.column_config.TextColumn("Statut", width="medium"),
        "budget_display": st.column_config.TextColumn("Budget", width="medium"),
        "score_risque": st.column_config.ProgressColumn(
            "Score Risque", 
            min_value=0, 
            max_value=100,
            format="%d%%"
        ),
        "responsable_nom": st.column_config.TextColumn("Responsable", width="medium"),
        "actions": st.column_config.TextColumn("Actions", width="small")
    }
    
    # Affichage avec √©diteur
    if not display_columns.empty:
        
        # S√©lection d'op√©ration pour actions
        selected_operations = st.data_editor(
            display_columns,
            column_config=column_config,
            disabled=list(display_columns.columns),
            hide_index=True,
            use_container_width=True,
            key="operations_table"
        )
        
        # Actions sur les op√©rations s√©lectionn√©es
        show_operations_actions(db_manager, filtered_df, user_session)

def show_manager_view(db_manager, db_utils, user_session: Dict):
    """Vue manager avec KPI et m√©triques"""
    
    st.subheader("üìä Vue Manager")
    
    try:
        # R√©cup√©rer m√©triques dashboard
        dashboard_data = db_utils.get_dashboard_metrics()
        
        if not dashboard_data:
            st.warning("Aucune donn√©e disponible pour le dashboard")
            return
        
        # KPI principaux
        st.markdown("### üìà Indicateurs Cl√©s")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Op√©rations Totales",
                dashboard_data.get('total_operations', {}).get('value', 0),
                help="Nombre total d'op√©rations en portefeuille"
            )
        
        with col2:
            st.metric(
                "En Cours",
                dashboard_data.get('operations_actives', {}).get('value', 0),
                help="Op√©rations actuellement en cours"
            )
        
        with col3:
            st.metric(
                "Score Risque Moyen",
                f"{dashboard_data.get('score_risque_moyen', {}).get('value', 0)}/100",
                help="Score de risque moyen du portefeuille"
            )
        
        with col4:
            budget_info = dashboard_data.get('budget_total', {})
            st.metric(
                "Budget Total",
                budget_info.get('value', '‚Ç¨0'),
                help="Budget total du portefeuille"
            )
        
        # Graphiques dashboard
        st.markdown("### üìä Analyses Visuelles")
        
        # R√©cup√©rer donn√©es compl√®tes pour graphiques
        metrics_data = db_manager.get_operations_dashboard()
        
        if metrics_data:
            # Graphique dashboard principal
            dashboard_fig = create_dashboard_metrics(metrics_data)
            st.plotly_chart(dashboard_fig, use_container_width=True)
        
        # TOP 3 des risques
        st.markdown("### üö® TOP 3 des Op√©rations √† Risque")
        
        top_risks = db_manager.get_top_risks(3)
        
        if top_risks:
            for i, risk_op in enumerate(top_risks, 1):
                with st.expander(f"#{i} - {risk_op['nom']} (Score: {risk_op['score_risque']}/100)"):
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**Type:** {risk_op['type_operation']}")
                        st.write(f"**Statut:** {risk_op['statut_global']}")
                        st.write(f"**Responsable:** {risk_op.get('responsable_nom', 'Non assign√©')}")
                    
                    with col2:
                        st.write(f"**Budget:** {format_number_french(risk_op.get('budget_initial', 0))}‚Ç¨")
                        st.write(f"**Alertes actives:** {risk_op.get('nb_alertes_actives', 0)}")
                        
                        # Badge score de risque
                        st.markdown(
                            FormComponents.risk_score_badge(risk_op['score_risque']),
                            unsafe_allow_html=True
                        )
        else:
            st.info("Aucune op√©ration √† risque identifi√©e")
        
        # √âvolution budg√©taire globale
        st.markdown("### üí∞ √âvolution Budg√©taire Globale")
        
        budget_evolution = db_utils.get_budget_evolution_global()
        
        if budget_evolution and budget_evolution.get('evolution_mensuelle'):
            budget_fig = create_budget_evolution_chart(budget_evolution['evolution_mensuelle'])
            st.plotly_chart(budget_fig, use_container_width=True)
        else:
            st.info("Aucune donn√©e d'√©volution budg√©taire disponible")
    
    except Exception as e:
        logger.error(f"Erreur vue manager: {e}")
        st.error(f"Erreur lors du chargement de la vue manager: {e}")

def show_timeline_view(db_manager, db_utils, user_session: Dict):
    """Vue timeline avec op√©ration s√©lectionnable"""
    
    st.subheader("üéØ Timeline des Op√©rations")
    
    # S√©lection d'op√©ration
    operations_options = db_utils.get_operations_for_selectbox(user_session.get('user_id'))
    
    if not operations_options:
        st.warning("Aucune op√©ration disponible")
        return
    
    selected_op_id = st.selectbox(
        "S√©lectionner une op√©ration",
        options=list(operations_options.keys()),
        format_func=lambda x: operations_options[x],
        key="timeline_operation_select"
    )
    
    if not selected_op_id:
        return
    
    try:
        # R√©cup√©rer donn√©es timeline
        timeline_data = db_manager.get_timeline_data(selected_op_id)
        
        if not timeline_data:
            st.warning("Aucune donn√©e timeline disponible")
            return
        
        # Informations op√©ration
        operation = db_manager.get_operation(selected_op_id)
        
        if operation:
            with st.expander("‚ÑπÔ∏è Informations Op√©ration", expanded=True):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write(f"**Nom:** {operation['nom']}")
                    st.write(f"**Type:** {operation['type_operation']}")
                
                with col2:
                    st.write(f"**Statut:** {operation['statut_global']}")
                    st.write(f"**Budget:** {format_number_french(operation.get('budget_initial', 0))}‚Ç¨")
                
                with col3:
                    st.write(f"**Score Risque:** {operation.get('score_risque', 0)}/100")
                    if operation.get('responsable_id'):
                        # R√©cup√©rer nom responsable
                        st.write(f"**Responsable:** [Responsable]")
        
        # Timeline interactive
        if timeline_data.get('phases'):
            timeline_fig = generate_timeline(
                timeline_data['phases'],
                timeline_data.get('alertes', []),
                timeline_data.get('journal', [])
            )
            
            st.plotly_chart(timeline_fig, use_container_width=True)
        
        # D√©tails phases
        st.markdown("### üìã D√©tail des Phases")
        
        phases_df = db_utils.get_phases_dataframe(selected_op_id)
        
        if not phases_df.empty:
            # Colonnes d'affichage
            display_cols = ['nom_phase', 'statut_phase', 'progression_pct', 
                          'date_debut_prevue', 'date_fin_prevue', 'principale']
            
            phases_display = phases_df[display_cols].copy()
            phases_display['statut_badge'] = phases_df['statut_phase'].apply(
                lambda x: FormComponents.status_badge(x, 'small')
            )
            
            st.dataframe(
                phases_display,
                column_config={
                    "nom_phase": "Phase",
                    "statut_badge": st.column_config.TextColumn("Statut"),
                    "progression_pct": st.column_config.ProgressColumn("Progression", min_value=0, max_value=100),
                    "date_debut_prevue": "D√©but Pr√©vu",
                    "date_fin_prevue": "Fin Pr√©vue",
                    "principale": st.column_config.CheckboxColumn("Principale")
                },
                hide_index=True,
                use_container_width=True
            )
        
        # Alertes actives sur cette op√©ration
        alertes_actives = timeline_data.get('alertes', [])
        
        if alertes_actives:
            st.markdown("### üö® Alertes Actives")
            
            for alerte in alertes_actives:
                alert_level = alerte.get('niveau_severite', 'MOYEN')
                alert_color = config.TYPES_ALERTES.get(alerte.get('type_alerte', 'TECHNIQUE'), {}).get('couleur', '#666666')
                
                st.markdown(f"""
                <div style="
                    border-left: 4px solid {alert_color};
                    background-color: #f8f9fa;
                    padding: 12px;
                    margin: 8px 0;
                    border-radius: 4px;
                ">
                    <strong>{alerte.get('titre', 'Alerte')}</strong> 
                    <span style="color: {alert_color}; font-weight: bold;">({alert_level})</span><br>
                    <small>{alerte.get('description', '')}</small><br>
                    <small style="color: #666;">Cr√©√©e le: {alerte.get('date_creation', '')}</small>
                </div>
                """, unsafe_allow_html=True)
    
    except Exception as e:
        logger.error(f"Erreur timeline: {e}")
        st.error(f"Erreur lors du chargement de la timeline: {e}")

def show_new_operation_form(db_manager, db_utils, user_session: Dict):
    """Formulaire de cr√©ation d'une nouvelle op√©ration"""
    
    st.subheader("‚ûï Nouvelle Op√©ration")
    
    # Options pour le formulaire
    user_options = db_utils.get_users_for_selectbox()
    
    # Formulaire principal
    operation_data = FormComponents.operation_form(
        operation_data=None,
        user_options=user_options
    )
    
    if operation_data:
        try:
            # Cr√©er l'op√©ration
            operation_id = db_manager.create_operation(
                operation_data, 
                user_session['user_id']
            )
            
            if operation_id:
                FormComponents.alert_message(
                    f"Op√©ration '{operation_data['nom']}' cr√©√©e avec succ√®s !",
                    "success"
                )
                
                # Calculer score de risque initial
                db_manager.calculate_risk_score(operation_id)
                
                # Actualiser cache
                st.cache_data.clear()
                
                # Proposer d'aller √† la timeline
                if st.button("üéØ Voir la Timeline de cette op√©ration"):
                    st.session_state['selected_operation'] = operation_id
                    st.experimental_rerun()
            else:
                FormComponents.alert_message(
                    "Erreur lors de la cr√©ation de l'op√©ration",
                    "error"
                )
        
        except Exception as e:
            logger.error(f"Erreur cr√©ation op√©ration: {e}")
            FormComponents.alert_message(
                f"Erreur lors de la cr√©ation: {e}",
                "error"
            )

# Fonctions utilitaires

def apply_portfolio_filters(df: pd.DataFrame, filters: Dict) -> pd.DataFrame:
    """Appliquer les filtres au portefeuille d'op√©rations"""
    
    filtered_df = df.copy()
    
    # Filtre type d'op√©ration
    if filters.get('type_operation'):
        filtered_df = filtered_df[filtered_df['type_operation'].isin(filters['type_operation'])]
    
    # Filtre statut
    if filters.get('statut_global'):
        filtered_df = filtered_df[filtered_df['statut_global'].isin(filters['statut_global'])]
    
    # Filtre score de risque
    if filters.get('score_risque_min', 0) > 0:
        filtered_df = filtered_df[filtered_df['score_risque'] >= filters['score_risque_min']]
    
    # Filtre budget
    if filters.get('budget_min') is not None and filters.get('budget_max') is not None:
        filtered_df = filtered_df[
            (filtered_df['budget_initial'] >= filters['budget_min']) &
            (filtered_df['budget_initial'] <= filters['budget_max'])
        ]
    
    return filtered_df

def prepare_operations_display(df: pd.DataFrame) -> pd.DataFrame:
    """Pr√©parer les colonnes d'affichage pour la table des op√©rations"""
    
    if df.empty:
        return df
    
    display_df = df.copy()
    
    # Formater statut avec badge
    display_df['statut_display'] = df['statut_global'].apply(
        lambda x: FormComponents.status_badge(x, 'small')
    )
    
    # Formater budget
    display_df['budget_display'] = df['budget_initial'].apply(
        lambda x: format_number_french(x) + "‚Ç¨" if pd.notna(x) and x > 0 else "Non d√©fini"
    )
    
    # Colonnes √† afficher
    columns_to_show = [
        'nom', 'type_operation', 'statut_display', 
        'budget_display', 'score_risque', 'secteur_geographique'
    ]
    
    # Ajouter responsable si disponible
    if 'responsable_id' in df.columns:
        # Simplification : afficher l'ID pour l'instant
        display_df['responsable_nom'] = df['responsable_id'].fillna('Non assign√©')
        columns_to_show.append('responsable_nom')
    
    return display_df[columns_to_show]

def show_operations_actions(db_manager, operations_df: pd.DataFrame, user_session: Dict):
    """Afficher les actions possibles sur les op√©rations"""
    
    st.markdown("### ‚ö° Actions Rapides")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîÑ Recalculer tous les scores de risque"):
            with st.spinner("Recalcul en cours..."):
                count = db_manager.recalculate_all_scores()
                st.success(f"‚úÖ {count} scores recalcul√©s")
                st.cache_data.clear()
    
    with col2:
        if st.button("üìä Mettre √† jour tous les statuts"):
            with st.spinner("Mise √† jour en cours..."):
                count = db_manager.update_all_statuses()
                st.success(f"‚úÖ {count} statuts mis √† jour")
                st.cache_data.clear()
    
    with col3:
        if st.button("üö® G√©n√©rer toutes les alertes"):
            with st.spinner("G√©n√©ration des alertes..."):
                db_manager.generate_alerts()
                st.success("‚úÖ Alertes g√©n√©r√©es")
                st.cache_data.clear()
    
    with col4:
        if st.button("üì• Exporter le portefeuille"):
            # Redirection vers module exports
            st.session_state['export_request'] = 'portfolio'
            st.info("üëâ Rendez-vous dans l'onglet Exports")
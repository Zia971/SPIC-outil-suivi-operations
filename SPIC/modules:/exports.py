"""
Module d'exports et rapports SPIC 2.0
Export Word, Excel, PDF avec templates personnalisables
Coh√©rent avec l'architecture refactoris√©e
"""

import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.shared import OxmlElement, qn
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, date
from typing import Dict, List, Optional
import io
import base64
import logging

import config
from utils import *
from utils.form_utils import FormComponents
from utils.db_utils import DatabaseUtils
from utils.constants import UI_MESSAGES, CACHE_CONFIG

logger = logging.getLogger(__name__)

def show_exports(db_manager, user_session: Dict):
    """Interface principale d'exports et rapports"""
    
    st.header("üì• Exports et Rapports")
    
    # Navigation par onglets (coh√©rent avec autres modules)
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä Exports Standard",
        "üìù Rapports Personnalis√©s",
        "üìã Templates",
        "üìà Exports Graphiques"
    ])
    
    db_utils = DatabaseUtils(db_manager)
    
    with tab1:
        show_standard_exports(db_manager, db_utils, user_session)
    
    with tab2:
        show_custom_reports(db_manager, db_utils, user_session)
    
    with tab3:
        show_templates_management(db_manager, db_utils, user_session)
    
    with tab4:
        show_graphic_exports(db_manager, db_utils, user_session)

def show_standard_exports(db_manager, db_utils, user_session: Dict):
    """Exports standard (Excel, Word, CSV)"""
    
    st.subheader("üìä Exports Standard")
    
    # S√©lection du type d'export
    export_type = st.selectbox(
        "Type d'export",
        options=[
            "portfolio", "operation_detail", "journal", "risks", 
            "budget_evolution", "rem_summary", "alerts"
        ],
        format_func=lambda x: {
            "portfolio": "üìã Portefeuille d'op√©rations",
            "operation_detail": "üéØ D√©tail d'une op√©ration",
            "journal": "üìñ Journal des modifications",
            "risks": "üö® Analyse des risques",
            "budget_evolution": "üí∞ √âvolution budg√©taire",
            "rem_summary": "üìà Synth√®se REM",
            "alerts": "‚ö†Ô∏è Alertes actives"
        }[x],
        key="standard_export_type"
    )
    
    # Configuration selon le type
    export_config = configure_export(export_type, db_utils, user_session)
    
    if not export_config:
        return
    
    # Formats disponibles
    available_formats = get_available_formats(export_type)
    
    col1, col2 = st.columns(2)
    
    with col1:
        selected_format = st.selectbox(
            "Format d'export",
            options=available_formats,
            format_func=lambda x: {
                "excel": "üìä Excel (.xlsx)",
                "word": "üìÑ Word (.docx)",
                "csv": "üìã CSV (.csv)",
                "pdf": "üìë PDF (.pdf)"
            }.get(x, x),
            key="export_format"
        )
    
    with col2:
        include_charts = st.checkbox(
            "Inclure les graphiques",
            value=True,
            key="include_charts"
        ) if selected_format in ["word", "pdf"] else False
    
    # Pr√©visualisation des donn√©es
    if st.checkbox("üëÅÔ∏è Aper√ßu des donn√©es", key="preview_data"):
        show_export_preview(db_manager, export_type, export_config, user_session)
    
    # Bouton d'export
    if st.button(f"üì• G√©n√©rer l'export {selected_format.upper()}", type="primary"):
        try:
            with st.spinner("G√©n√©ration de l'export en cours..."):
                
                # G√©n√©rer l'export selon le format
                if selected_format == "excel":
                    file_data, filename = generate_excel_export(
                        db_manager, export_type, export_config, user_session
                    )
                    mime_type = config.FORMATS_EXPORT["excel"]["mime"]
                
                elif selected_format == "word":
                    file_data, filename = generate_word_export(
                        db_manager, export_type, export_config, user_session, include_charts
                    )
                    mime_type = config.FORMATS_EXPORT["word"]["mime"]
                
                elif selected_format == "csv":
                    file_data, filename = generate_csv_export(
                        db_manager, export_type, export_config, user_session
                    )
                    mime_type = config.FORMATS_EXPORT["csv"]["mime"]
                
                elif selected_format == "pdf":
                    file_data, filename = generate_pdf_export(
                        db_manager, export_type, export_config, user_session, include_charts
                    )
                    mime_type = config.FORMATS_EXPORT["pdf"]["mime"]
                
                if file_data:
                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label=f"üì• T√©l√©charger {filename}",
                        data=file_data,
                        file_name=filename,
                        mime=mime_type,
                        type="secondary"
                    )
                    
                    FormComponents.alert_message(
                        f"Export {selected_format} g√©n√©r√© avec succ√®s !",
                        "success"
                    )
                else:
                    FormComponents.alert_message(
                        "Erreur lors de la g√©n√©ration de l'export",
                        "error"
                    )
        
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration export: {e}")
            FormComponents.alert_message(f"Erreur export: {e}", "error")

def show_custom_reports(db_manager, db_utils, user_session: Dict):
    """Rapports personnalis√©s avec filtres avanc√©s"""
    
    st.subheader("üìù Rapports Personnalis√©s")
    
    with st.form("custom_report_form"):
        st.markdown("#### ‚öôÔ∏è Configuration du Rapport")
        
        # Sections √† inclure
        col1, col2 = st.columns(2)
        
        with col1:
            include_operations = st.checkbox("üìã Vue op√©rations", value=True)
            include_timeline = st.checkbox("üéØ Timeline", value=False)
            include_risks = st.checkbox("üö® Analyse risques", value=True)
            include_budget = st.checkbox("üí∞ Suivi budg√©taire", value=True)
        
        with col2:
            include_rem = st.checkbox("üìà REM", value=False)
            include_alerts = st.checkbox("‚ö†Ô∏è Alertes", value=True)
            include_journal = st.checkbox("üìñ Journal (extrait)", value=False)
            include_stats = st.checkbox("üìä Statistiques", value=True)
        
        # Filtres
        st.markdown("#### üîç Filtres")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Filtre par type d'op√©ration
            selected_types = st.multiselect(
                "Types d'op√©ration",
                options=config.TYPES_OPERATIONS,
                default=config.TYPES_OPERATIONS
            )
            
            # Filtre par statut
            selected_statuts = st.multiselect(
                "Statuts",
                options=list(config.STATUTS_OPERATIONS.keys()),
                default=list(config.STATUTS_OPERATIONS.keys()),
                format_func=lambda x: config.STATUTS_OPERATIONS[x]['libelle']
            )
        
        with col2:
            # P√©riode
            date_range = st.date_input(
                "P√©riode d'analyse",
                value=[date.today() - timedelta(days=90), date.today()],
                help="P√©riode pour l'analyse des donn√©es"
            )
            
            # Score de risque minimum
            min_risk_score = st.slider(
                "Score de risque minimum",
                min_value=0,
                max_value=100,
                value=0,
                help="Inclure seulement les op√©rations avec score ‚â•"
            )
        
        with col3:
            # Format de rapport
            report_format = st.selectbox(
                "Format du rapport",
                options=["word", "pdf"],
                format_func=lambda x: "üìÑ Word" if x == "word" else "üìë PDF"
            )
            
            # Style de rapport
            report_style = st.selectbox(
                "Style de rapport",
                options=["executif", "detaille", "technique"],
                format_func=lambda x: {
                    "executif": "üëî Ex√©cutif (synth√®se)",
                    "detaille": "üìã D√©taill√© (complet)",
                    "technique": "üîß Technique (analyse)"
                }[x]
            )
        
        # M√©tadonn√©es du rapport
        st.markdown("#### üìù Informations du Rapport")
        
        col1, col2 = st.columns(2)
        
        with col1:
            report_title = st.text_input(
                "Titre du rapport",
                value=f"Rapport SPIC - {datetime.now().strftime('%d/%m/%Y')}"
            )
            
            report_author = st.text_input(
                "Auteur",
                value=user_session.get('nom', '') + " " + user_session.get('prenom', '')
            )
        
        with col2:
            report_description = st.text_area(
                "Description",
                value="Rapport automatique g√©n√©r√© par SPIC 2.0",
                height=100
            )
        
        # Bouton g√©n√©ration
        submitted = st.form_submit_button("üìã G√©n√©rer le Rapport Personnalis√©", type="primary")
    
    if submitted:
        try:
            with st.spinner("G√©n√©ration du rapport personnalis√© en cours..."):
                
                # Configuration du rapport
                report_config = {
                    'sections': {
                        'operations': include_operations,
                        'timeline': include_timeline,
                        'risks': include_risks,
                        'budget': include_budget,
                        'rem': include_rem,
                        'alerts': include_alerts,
                        'journal': include_journal,
                        'stats': include_stats
                    },
                    'filters': {
                        'types': selected_types,
                        'statuts': selected_statuts,
                        'date_range': date_range,
                        'min_risk_score': min_risk_score
                    },
                    'metadata': {
                        'title': report_title,
                        'author': report_author,
                        'description': report_description,
                        'style': report_style
                    }
                }
                
                # G√©n√©rer le rapport
                if report_format == "word":
                    file_data, filename = generate_custom_word_report(
                        db_manager, report_config, user_session
                    )
                    mime_type = config.FORMATS_EXPORT["word"]["mime"]
                else:
                    file_data, filename = generate_custom_pdf_report(
                        db_manager, report_config, user_session
                    )
                    mime_type = config.FORMATS_EXPORT["pdf"]["mime"]
                
                if file_data:
                    st.download_button(
                        label=f"üì• T√©l√©charger {filename}",
                        data=file_data,
                        file_name=filename,
                        mime=mime_type,
                        type="secondary"
                    )
                    
                    FormComponents.alert_message(
                        "Rapport personnalis√© g√©n√©r√© avec succ√®s !",
                        "success"
                    )
        
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration rapport personnalis√©: {e}")
            FormComponents.alert_message(f"Erreur g√©n√©ration rapport: {e}", "error")

def show_templates_management(db_manager, db_utils, user_session: Dict):
    """Gestion des templates d'export"""
    
    st.subheader("üìã Gestion des Templates")
    
    # Templates disponibles
    st.markdown("### üìÑ Templates Disponibles")
    
    templates = get_available_templates()
    
    for template in templates:
        with st.expander(f"üìù {template['name']} - {template['description']}"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write(f"**Type:** {template['type']}")
                st.write(f"**Format:** {template['format']}")
            
            with col2:
                st.write(f"**Sections:** {len(template['sections'])}")
                st.write(f"**Derni√®re MAJ:** {template['last_modified']}")
            
            with col3:
                if st.button(f"üì• Utiliser", key=f"use_template_{template['id']}"):
                    st.session_state['selected_template'] = template['id']
                    st.info(f"Template '{template['name']}' s√©lectionn√©")
                
                if st.button(f"üëÅÔ∏è Aper√ßu", key=f"preview_template_{template['id']}"):
                    show_template_preview(template)
    
    # Cr√©ation de nouveau template
    st.markdown("### ‚ûï Cr√©er un Nouveau Template")
    
    with st.expander("üõ†Ô∏è Cr√©ateur de Template"):
        with st.form("new_template_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                template_name = st.text_input("Nom du template")
                template_type = st.selectbox(
                    "Type de template",
                    options=["operation", "portfolio", "risks", "financial"]
                )
            
            with col2:
                template_format = st.selectbox(
                    "Format",
                    options=["word", "excel"],
                    format_func=lambda x: "üìÑ Word" if x == "word" else "üìä Excel"
                )
                template_description = st.text_input("Description")
            
            # Sections √† inclure
            st.markdown("**Sections √† inclure:**")
            
            template_sections = {}
            col1, col2, col3 = st.columns(3)
            
            with col1:
                template_sections['header'] = st.checkbox("En-t√™te", value=True)
                template_sections['summary'] = st.checkbox("R√©sum√©", value=True)
                template_sections['operations'] = st.checkbox("Op√©rations", value=True)
            
            with col2:
                template_sections['timeline'] = st.checkbox("Timeline", value=False)
                template_sections['budget'] = st.checkbox("Budget", value=True)
                template_sections['risks'] = st.checkbox("Risques", value=True)
            
            with col3:
                template_sections['alerts'] = st.checkbox("Alertes", value=True)
                template_sections['charts'] = st.checkbox("Graphiques", value=True)
                template_sections['footer'] = st.checkbox("Pied de page", value=True)
            
            submitted = st.form_submit_button("üíæ Cr√©er le Template")
            
            if submitted and template_name:
                # Sauvegarder le template (simulation)
                new_template = {
                    'name': template_name,
                    'type': template_type,
                    'format': template_format,
                    'description': template_description,
                    'sections': template_sections,
                    'created_by': user_session.get('user_id'),
                    'created_at': datetime.now().isoformat()
                }
                
                # Dans une vraie application, sauvegarder en BDD
                FormComponents.alert_message(
                    f"Template '{template_name}' cr√©√© avec succ√®s !",
                    "success"
                )

def show_graphic_exports(db_manager, db_utils, user_session: Dict):
    """Exports sp√©cifiques aux graphiques"""
    
    st.subheader("üìà Exports Graphiques")
    
    # Types de graphiques disponibles
    graphic_types = {
        "dashboard_metrics": "üìä M√©triques Dashboard",
        "risk_distribution": "üö® Distribution des Risques",
        "budget_evolution": "üí∞ √âvolution Budg√©taire",
        "timeline_gantt": "üìÖ Diagramme de Gantt",
        "rem_analysis": "üìà Analyse REM",
        "alerts_summary": "‚ö†Ô∏è Synth√®se Alertes"
    }
    
    selected_graphic = st.selectbox(
        "Type de graphique",
        options=list(graphic_types.keys()),
        format_func=lambda x: graphic_types[x],
        key="graphic_export_type"
    )
    
    # Configuration selon le type de graphique
    graphic_config = configure_graphic_export(selected_graphic, db_utils, user_session)
    
    if graphic_config:
        # Formats d'export graphique
        col1, col2 = st.columns(2)
        
        with col1:
            export_format = st.selectbox(
                "Format d'export",
                options=["png", "pdf", "svg", "html"],
                format_func=lambda x: {
                    "png": "üñºÔ∏è PNG (image)",
                    "pdf": "üìë PDF",
                    "svg": "üìê SVG (vectoriel)",
                    "html": "üåê HTML (interactif)"
                }[x]
            )
        
        with col2:
            if export_format in ["png", "pdf"]:
                resolution = st.selectbox(
                    "R√©solution",
                    options=["standard", "high", "print"],
                    format_func=lambda x: {
                        "standard": "Standard (96 DPI)",
                        "high": "Haute (300 DPI)",
                        "print": "Impression (600 DPI)"
                    }[x]
                )
        
        # Aper√ßu du graphique
        if st.checkbox("üëÅÔ∏è Aper√ßu du graphique", value=True):
            try:
                preview_fig = generate_graphic_preview(
                    db_manager, selected_graphic, graphic_config, user_session
                )
                
                if preview_fig:
                    st.plotly_chart(preview_fig, use_container_width=True)
            
            except Exception as e:
                logger.error(f"Erreur aper√ßu graphique: {e}")
                st.error(f"Erreur g√©n√©ration aper√ßu: {e}")
        
        # Export du graphique
        if st.button("üì• Exporter le Graphique", type="primary"):
            try:
                with st.spinner("Export du graphique en cours..."):
                    
                    file_data, filename = export_graphic(
                        db_manager, selected_graphic, graphic_config, 
                        export_format, user_session
                    )
                    
                    if file_data:
                        mime_types = {
                            "png": "image/png",
                            "pdf": "application/pdf",
                            "svg": "image/svg+xml",
                            "html": "text/html"
                        }
                        
                        st.download_button(
                            label=f"üì• T√©l√©charger {filename}",
                            data=file_data,
                            file_name=filename,
                            mime=mime_types.get(export_format, "application/octet-stream")
                        )
                        
                        FormComponents.alert_message(
                            f"Graphique export√© en {export_format.upper()} avec succ√®s !",
                            "success"
                        )
            
            except Exception as e:
                logger.error(f"Erreur export graphique: {e}")
                FormComponents.alert_message(f"Erreur export graphique: {e}", "error")

# Fonctions utilitaires coh√©rentes avec l'architecture

def configure_export(export_type: str, db_utils: DatabaseUtils, user_session: Dict) -> Optional[Dict]:
    """Configurer les param√®tres d'export selon le type"""
    
    config = {"type": export_type}
    
    if export_type == "operation_detail":
        # S√©lection d'une op√©ration sp√©cifique
        operations_options = db_utils.get_operations_for_selectbox(user_session.get('user_id'))
        
        if not operations_options:
            st.warning("Aucune op√©ration disponible")
            return None
        
        selected_op = st.selectbox(
            "Op√©ration √† exporter",
            options=list(operations_options.keys()),
            format_func=lambda x: operations_options[x],
            key="export_operation_select"
        )
        
        config["operation_id"] = selected_op
    
    elif export_type in ["journal", "risks", "alerts"]:
        # Filtres de p√©riode
        col1, col2 = st.columns(2)
        
        with col1:
            start_date = st.date_input(
                "Date de d√©but",
                value=date.today() - timedelta(days=30),
                key=f"{export_type}_start_date"
            )
        
        with col2:
            end_date = st.date_input(
                "Date de fin",
                value=date.today(),
                key=f"{export_type}_end_date"
            )
        
        config["date_range"] = [start_date, end_date]
    
    elif export_type == "portfolio":
        # Filtres portefeuille
        col1, col2 = st.columns(2)
        
        with col1:
            selected_types = st.multiselect(
                "Types d'op√©ration",
                options=config.TYPES_OPERATIONS,
                default=config.TYPES_OPERATIONS,
                key="portfolio_types"
            )
        
        with col2:
            selected_statuts = st.multiselect(
                "Statuts",
                options=list(config.STATUTS_OPERATIONS.keys()),
                default=list(config.STATUTS_OPERATIONS.keys()),
                format_func=lambda x: config.STATUTS_OPERATIONS[x]['libelle'],
                key="portfolio_statuts"
            )
        
        config["filters"] = {
            "types": selected_types,
            "statuts": selected_statuts
        }
    
    return config

def get_available_formats(export_type: str) -> List[str]:
    """Formats disponibles selon le type d'export"""
    
    format_mapping = {
        "portfolio": ["excel", "csv", "word"],
        "operation_detail": ["word", "pdf", "excel"],
        "journal": ["excel", "csv"],
        "risks": ["word", "pdf", "excel"],
        "budget_evolution": ["excel", "word"],
        "rem_summary": ["excel", "word"],
        "alerts": ["excel", "csv", "word"]
    }
    
    return format_mapping.get(export_type, ["excel", "csv"])

def show_export_preview(db_manager, export_type: str, export_config: Dict, user_session: Dict):
    """Aper√ßu des donn√©es avant export"""
    
    try:
        if export_type == "portfolio":
            # R√©cup√©rer donn√©es portefeuille
            operations = db_manager.get_all_operations(user_session.get('user_id'))
            if operations:
                df = pd.DataFrame(operations)
                
                # Appliquer filtres
                filters = export_config.get('filters', {})
                if filters.get('types'):
                    df = df[df['type_operation'].isin(filters['types'])]
                if filters.get('statuts'):
                    df = df[df['statut_global'].isin(filters['statuts'])]
                
                st.dataframe(df.head(10), use_container_width=True)
                st.info(f"üìä {len(df)} op√©ration(s) √† exporter")
        
        elif export_type == "operation_detail":
            # D√©tail op√©ration
            operation_id = export_config.get('operation_id')
            if operation_id:
                operation = db_manager.get_operation(operation_id)
                phases = db_manager.get_phases_by_operation(operation_id)
                
                if operation:
                    st.write("**Op√©ration:**", operation['nom'])
                    st.write("**Type:**", operation['type_operation'])
                    st.write("**Phases:**", len(phases))
        
        elif export_type == "journal":
            # Aper√ßu journal
            date_range = export_config.get('date_range')
            if date_range:
                # Simulation aper√ßu journal
                st.info(f"üìñ Journal du {date_range[0]} au {date_range[1]}")
        
        else:
            st.info(f"üìã Aper√ßu pour {export_type}")
    
    except Exception as e:
        logger.error(f"Erreur aper√ßu export: {e}")
        st.error(f"Erreur aper√ßu: {e}")

# Fonctions de g√©n√©ration d'exports

def generate_excel_export(db_manager, export_type: str, export_config: Dict, user_session: Dict) -> tuple:
    """G√©n√©rer export Excel"""
    
    try:
        # Cr√©er un buffer en m√©moire
        output = io.BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            
            if export_type == "portfolio":
                # Export portefeuille
                operations = db_manager.get_all_operations(user_session.get('user_id'))
                if operations:
                    df = pd.DataFrame(operations)
                    
                    # Appliquer filtres
                    filters = export_config.get('filters', {})
                    if filters.get('types'):
                        df = df[df['type_operation'].isin(filters['types'])]
                    if filters.get('statuts'):
                        df = df[df['statut_global'].isin(filters['statuts'])]
                    
                    # Formater colonnes
                    df['budget_initial'] = df['budget_initial'].fillna(0)
                    df['date_debut'] = pd.to_datetime(df['date_debut']).dt.strftime('%d/%m/%Y')
                    
                    df.to_excel(writer, sheet_name='Op√©rations', index=False)
            
            elif export_type == "operation_detail":
                # Export d√©tail op√©ration
                operation_id = export_config.get('operation_id')
                if operation_id:
                    # Feuille op√©ration
                    operation = db_manager.get_operation(operation_id)
                    if operation:
                        op_df = pd.DataFrame([operation])
                        op_df.to_excel(writer, sheet_name='Op√©ration', index=False)
                    
                    # Feuille phases
                    phases = db_manager.get_phases_by_operation(operation_id)
                    if phases:
                        phases_df = pd.DataFrame(phases)
                        phases_df.to_excel(writer, sheet_name='Phases', index=False)
                    
                    # Feuille budget
                    budgets = db_manager.get_budget_evolution(operation_id)
                    if budgets:
                        budget_df = pd.DataFrame(budgets)
                        budget_df.to_excel(writer, sheet_name='Budgets', index=False)
            
            elif export_type == "journal":
                # Export journal
                date_range = export_config.get('date_range')
                if date_range:
                    journal = db_manager.get_journal_entries(limit=1000)
                    if journal:
                        journal_df = pd.DataFrame(journal)
                        journal_df['timestamp'] = pd.to_datetime(journal_df['timestamp']).dt.strftime('%d/%m/%Y %H:%M')
                        journal_df.to_excel(writer, sheet_name='Journal', index=False)
        
        output.seek(0)
        filename = f"export_spic_{export_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        return output.getvalue(), filename
    
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration Excel: {e}")
        return None, None

def generate_word_export(db_manager, export_type: str, export_config: Dict, 
                        user_session: Dict, include_charts: bool = False) -> tuple:
    """G√©n√©rer export Word avec python-docx"""
    
    try:
        # Cr√©er document Word
        doc = Document()
        
        # En-t√™te du document
        title = doc.add_heading(f'Rapport SPIC - {export_type.title()}', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Informations g√©n√©rales
        doc.add_paragraph(f"G√©n√©r√© le : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        doc.add_paragraph(f"Utilisateur : {user_session.get('nom', '')} {user_session.get('prenom', '')}")
        doc.add_paragraph("")
        
        if export_type == "portfolio":
            # Rapport portefeuille
            generate_portfolio_word_section(doc, db_manager, export_config, user_session)
        
        elif export_type == "operation_detail":
            # Rapport d√©tail op√©ration
            operation_id = export_config.get('operation_id')
            if operation_id:
                generate_operation_detail_word_section(doc, db_manager, operation_id, include_charts)
        
        elif export_type == "risks":
            # Rapport risques
            generate_risks_word_section(doc, db_manager, export_config, user_session)
        
            # Sauvegarder en m√©moire
        output = io.BytesIO()
        doc.save(output)
        output.seek(0)
        
        filename = f"rapport_spic_{export_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        
        return output.getvalue(), filename
    
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration Word: {e}")
        return None, None

def generate_csv_export(db_manager, export_type: str, export_config: Dict, user_session: Dict) -> tuple:
    """G√©n√©rer export CSV"""
    
    try:
        if export_type == "portfolio":
            operations = db_manager.get_all_operations(user_session.get('user_id'))
            if operations:
                df = pd.DataFrame(operations)
                
                # Appliquer filtres
                filters = export_config.get('filters', {})
                if filters.get('types'):
                    df = df[df['type_operation'].isin(filters['types'])]
                if filters.get('statuts'):
                    df = df[df['statut_global'].isin(filters['statuts'])]
                
                csv_data = df.to_csv(index=False, encoding='utf-8-sig', sep=';')
        
        elif export_type == "journal":
            journal = db_manager.get_journal_entries(limit=1000)
            if journal:
                df = pd.DataFrame(journal)
                df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%d/%m/%Y %H:%M')
                csv_data = df.to_csv(index=False, encoding='utf-8-sig', sep=';')
        
        elif export_type == "alerts":
            alerts = db_manager.get_active_alerts()
            if alerts:
                df = pd.DataFrame(alerts)
                df['date_creation'] = pd.to_datetime(df['date_creation']).dt.strftime('%d/%m/%Y')
                csv_data = df.to_csv(index=False, encoding='utf-8-sig', sep=';')
        
        else:
            csv_data = "Type d'export CSV non support√©"
        
        filename = f"export_spic_{export_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        return csv_data.encode('utf-8-sig'), filename
    
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration CSV: {e}")
        return None, None

def generate_pdf_export(db_manager, export_type: str, export_config: Dict, 
                       user_session: Dict, include_charts: bool = False) -> tuple:
    """G√©n√©rer export PDF (via conversion Word)"""
    
    try:
        # Pour simplifier, on g√©n√®re d'abord un Word puis on le convertit
        # Dans une vraie application, on utiliserait reportlab ou weasyprint
        
        word_data, word_filename = generate_word_export(
            db_manager, export_type, export_config, user_session, include_charts
        )
        
        if word_data:
            # Simulation conversion PDF
            # Dans la r√©alit√© : utiliser python-docx2pdf ou similaire
            pdf_filename = word_filename.replace('.docx', '.pdf')
            
            # Pour l'instant, retourner le Word comme PDF (simulation)
            return word_data, pdf_filename
        
        return None, None
    
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration PDF: {e}")
        return None, None

# Fonctions de g√©n√©ration des sections Word

def generate_portfolio_word_section(doc, db_manager, export_config: Dict, user_session: Dict):
    """G√©n√©rer section portefeuille dans document Word"""
    
    try:
        doc.add_heading('Portefeuille d\'Op√©rations', level=1)
        
        # R√©cup√©rer donn√©es
        operations = db_manager.get_all_operations(user_session.get('user_id'))
        
        if not operations:
            doc.add_paragraph("Aucune op√©ration trouv√©e.")
            return
        
        df = pd.DataFrame(operations)
        
        # Appliquer filtres
        filters = export_config.get('filters', {})
        if filters.get('types'):
            df = df[df['type_operation'].isin(filters['types'])]
        if filters.get('statuts'):
            df = df[df['statut_global'].isin(filters['statuts'])]
        
        # Statistiques g√©n√©rales
        doc.add_heading('Statistiques G√©n√©rales', level=2)
        doc.add_paragraph(f"Nombre total d'op√©rations : {len(df)}")
        
        # R√©partition par type
        type_counts = df['type_operation'].value_counts()
        doc.add_paragraph("R√©partition par type d'op√©ration :")
        for op_type, count in type_counts.items():
            doc.add_paragraph(f"  ‚Ä¢ {op_type} : {count} op√©ration(s)", style='List Bullet')
        
        # R√©partition par statut
        status_counts = df['statut_global'].value_counts()
        doc.add_paragraph("R√©partition par statut :")
        for status, count in status_counts.items():
            status_label = config.STATUTS_OPERATIONS.get(status, {}).get('libelle', status)
            doc.add_paragraph(f"  ‚Ä¢ {status_label} : {count} op√©ration(s)", style='List Bullet')
        
        # Budget total
        budget_total = df['budget_initial'].fillna(0).sum()
        doc.add_paragraph(f"Budget total du portefeuille : {format_number_french(budget_total)}‚Ç¨")
        
        # Score de risque moyen
        score_moyen = df['score_risque'].fillna(0).mean()
        doc.add_paragraph(f"Score de risque moyen : {score_moyen:.1f}/100")
        
        # Table des op√©rations
        doc.add_heading('Liste des Op√©rations', level=2)
        
        # Cr√©er tableau
        table = doc.add_table(rows=1, cols=5)
        table.style = 'Table Grid'
        
        # En-t√™tes
        headers = ['Nom', 'Type', 'Statut', 'Budget Initial', 'Score Risque']
        for i, header in enumerate(headers):
            table.cell(0, i).text = header
            table.cell(0, i).paragraphs[0].runs[0].font.bold = True
        
        # Donn√©es
        for _, operation in df.iterrows():
            row = table.add_row()
            row.cells[0].text = operation.get('nom', '')
            row.cells[1].text = operation.get('type_operation', '')
            row.cells[2].text = config.STATUTS_OPERATIONS.get(
                operation.get('statut_global', ''), {}
            ).get('libelle', operation.get('statut_global', ''))
            row.cells[3].text = f"{format_number_french(operation.get('budget_initial', 0))}‚Ç¨"
            row.cells[4].text = f"{operation.get('score_risque', 0)}/100"
    
    except Exception as e:
        logger.error(f"Erreur section portefeuille Word: {e}")
        doc.add_paragraph(f"Erreur g√©n√©ration section portefeuille: {e}")

def generate_operation_detail_word_section(doc, db_manager, operation_id: str, include_charts: bool):
    """G√©n√©rer section d√©tail op√©ration dans document Word"""
    
    try:
        operation = db_manager.get_operation(operation_id)
        
        if not operation:
            doc.add_paragraph("Op√©ration non trouv√©e.")
            return
        
        doc.add_heading(f'D√©tail de l\'Op√©ration: {operation["nom"]}', level=1)
        
        # Informations g√©n√©rales
        doc.add_heading('Informations G√©n√©rales', level=2)
        
        info_table = doc.add_table(rows=8, cols=2)
        info_table.style = 'Table Grid'
        
        infos = [
            ('Nom', operation.get('nom', '')),
            ('Type d\'op√©ration', operation.get('type_operation', '')),
            ('Statut', config.STATUTS_OPERATIONS.get(operation.get('statut_global', ''), {}).get('libelle', '')),
            ('Budget initial', f"{format_number_french(operation.get('budget_initial', 0))}‚Ç¨"),
            ('Surface', f"{format_number_french(operation.get('surface_m2', 0))} m¬≤" if operation.get('surface_m2') else 'Non d√©finie'),
            ('Secteur g√©ographique', operation.get('secteur_geographique', 'Non d√©fini')),
            ('Score de risque', f"{operation.get('score_risque', 0)}/100"),
            ('Date de cr√©ation', operation.get('created_at', '')[:10] if operation.get('created_at') else '')
        ]
        
        for i, (label, value) in enumerate(infos):
            info_table.cell(i, 0).text = label
            info_table.cell(i, 0).paragraphs[0].runs[0].font.bold = True
            info_table.cell(i, 1).text = str(value)
        
        # Phases
        phases = db_manager.get_phases_by_operation(operation_id)
        
        if phases:
            doc.add_heading('Phases de l\'Op√©ration', level=2)
            
            phases_table = doc.add_table(rows=1, cols=4)
            phases_table.style = 'Table Grid'
            
            # En-t√™tes phases
            phase_headers = ['Phase', 'Statut', 'Progression', 'Principale']
            for i, header in enumerate(phase_headers):
                phases_table.cell(0, i).text = header
                phases_table.cell(0, i).paragraphs[0].runs[0].font.bold = True
            
            # Donn√©es phases
            for phase in phases:
                row = phases_table.add_row()
                row.cells[0].text = phase.get('nom_phase', '')
                row.cells[1].text = config.STATUTS_PHASES.get(
                    phase.get('statut_phase', ''), {}
                ).get('libelle', phase.get('statut_phase', ''))
                row.cells[2].text = f"{phase.get('progression_pct', 0)}%"
                row.cells[3].text = "Oui" if phase.get('principale') else "Non"
        
        # Budget
        budgets = db_manager.get_budget_evolution(operation_id)
        
        if budgets:
            doc.add_heading('√âvolution Budg√©taire', level=2)
            
            budget_table = doc.add_table(rows=1, cols=4)
            budget_table.style = 'Table Grid'
            
            budget_headers = ['Type', 'Montant', 'Date', 'Justification']
            for i, header in enumerate(budget_headers):
                budget_table.cell(0, i).text = header
                budget_table.cell(0, i).paragraphs[0].runs[0].font.bold = True
            
            for budget in budgets:
                row = budget_table.add_row()
                row.cells[0].text = budget.get('type_budget', '')
                row.cells[1].text = f"{format_number_french(budget.get('montant', 0))}‚Ç¨"
                row.cells[2].text = budget.get('date_budget', '')[:10] if budget.get('date_budget') else ''
                row.cells[3].text = budget.get('justification', '')[:50] + '...' if len(budget.get('justification', '')) > 50 else budget.get('justification', '')
        
        # Alertes actives
        alerts = db_manager.get_active_alerts(operation_id)
        
        if alerts:
            doc.add_heading('Alertes Actives', level=2)
            
            for alert in alerts:
                doc.add_paragraph(
                    f"‚Ä¢ {alert.get('titre', 'Alerte')} ({alert.get('niveau_severite', 'MOYEN')})",
                    style='List Bullet'
                )
                if alert.get('description'):
                    doc.add_paragraph(f"  Description: {alert['description']}")
    
    except Exception as e:
        logger.error(f"Erreur section d√©tail op√©ration Word: {e}")
        doc.add_paragraph(f"Erreur g√©n√©ration section d√©tail: {e}")

def generate_risks_word_section(doc, db_manager, export_config: Dict, user_session: Dict):
    """G√©n√©rer section analyse des risques dans document Word"""
    
    try:
        doc.add_heading('Analyse des Risques', level=1)
        
        # TOP des risques
        top_risks = db_manager.get_top_risks(10)
        
        if top_risks:
            doc.add_heading('TOP 10 des Op√©rations √† Risque', level=2)
            
            risks_table = doc.add_table(rows=1, cols=4)
            risks_table.style = 'Table Grid'
            
            risk_headers = ['Rang', 'Op√©ration', 'Score de Risque', 'Statut']
            for i, header in enumerate(risk_headers):
                risks_table.cell(0, i).text = header
                risks_table.cell(0, i).paragraphs[0].runs[0].font.bold = True
            
            for i, risk_op in enumerate(top_risks, 1):
                row = risks_table.add_row()
                row.cells[0].text = str(i)
                row.cells[1].text = risk_op.get('nom', '')
                row.cells[2].text = f"{risk_op.get('score_risque', 0)}/100"
                row.cells[3].text = config.STATUTS_OPERATIONS.get(
                    risk_op.get('statut_global', ''), {}
                ).get('libelle', risk_op.get('statut_global', ''))
        
        # Statistiques globales des risques
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT 
                    AVG(score_risque) as score_moyen,
                    COUNT(CASE WHEN score_risque >= 75 THEN 1 END) as critiques,
                    COUNT(CASE WHEN score_risque >= 50 THEN 1 END) as eleves,
                    COUNT(*) as total
                FROM operations
            """)
            
            stats = dict(cursor.fetchone())
        
        if stats:
            doc.add_heading('Statistiques des Risques', level=2)
            doc.add_paragraph(f"Score de risque moyen du portefeuille : {stats.get('score_moyen', 0):.1f}/100")
            doc.add_paragraph(f"Op√©rations critiques (‚â•75) : {stats.get('critiques', 0)}")
            doc.add_paragraph(f"Op√©rations √† risque √©lev√© (‚â•50) : {stats.get('eleves', 0)}")
            doc.add_paragraph(f"Total op√©rations analys√©es : {stats.get('total', 0)}")
        
        # Alertes actives
        alerts = db_manager.get_active_alerts()
        
        if alerts:
            doc.add_heading('Alertes Actives', level=2)
            
            # Grouper par niveau
            alerts_by_level = {}
            for alert in alerts:
                level = alert.get('niveau_severite', 'MOYEN')
                if level not in alerts_by_level:
                    alerts_by_level[level] = []
                alerts_by_level[level].append(alert)
            
            for level in ['CRITIQUE', 'ELEVE', 'MOYEN', 'FAIBLE']:
                if level in alerts_by_level:
                    doc.add_paragraph(f"{level} ({len(alerts_by_level[level])} alertes):", style='Heading 3')
                    
                    for alert in alerts_by_level[level][:5]:  # Limiter √† 5 par niveau
                        doc.add_paragraph(
                            f"‚Ä¢ {alert.get('titre', 'Alerte')} - {alert.get('operation_nom', 'Op√©ration')}",
                            style='List Bullet'
                        )
    
    except Exception as e:
        logger.error(f"Erreur section risques Word: {e}")
        doc.add_paragraph(f"Erreur g√©n√©ration section risques: {e}")

# Fonctions pour rapports personnalis√©s

def generate_custom_word_report(db_manager, report_config: Dict, user_session: Dict) -> tuple:
    """G√©n√©rer rapport Word personnalis√©"""
    
    try:
        doc = Document()
        
        # M√©tadonn√©es du rapport
        metadata = report_config.get('metadata', {})
        
        # Titre
        title = doc.add_heading(metadata.get('title', 'Rapport SPIC Personnalis√©'), 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Informations du rapport
        doc.add_paragraph(f"Auteur : {metadata.get('author', '')}")
        doc.add_paragraph(f"Date de g√©n√©ration : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        doc.add_paragraph(f"Style : {metadata.get('style', 'Standard')}")
        doc.add_paragraph("")
        
        if metadata.get('description'):
            doc.add_paragraph(metadata['description'])
            doc.add_paragraph("")
        
        # Sections selon configuration
        sections = report_config.get('sections', {})
        filters = report_config.get('filters', {})
        
        if sections.get('operations'):
            # Adapter export_config pour les filtres
            export_config = {'filters': filters}
            generate_portfolio_word_section(doc, db_manager, export_config, user_session)
        
        if sections.get('risks'):
            generate_risks_word_section(doc, db_manager, {}, user_session)
        
        if sections.get('budget'):
            generate_budget_word_section(doc, db_manager, filters, user_session)
        
        if sections.get('alerts'):
            generate_alerts_word_section(doc, db_manager, filters, user_session)
        
        if sections.get('stats'):
            generate_stats_word_section(doc, db_manager, filters, user_session)
        
        # Sauvegarder
        output = io.BytesIO()
        doc.save(output)
        output.seek(0)
        
        filename = f"rapport_personnalise_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        
        return output.getvalue(), filename
    
    except Exception as e:
        logger.error(f"Erreur rapport personnalis√© Word: {e}")
        return None, None

def generate_budget_word_section(doc, db_manager, filters: Dict, user_session: Dict):
    """Section budget pour rapport personnalis√©"""
    
    try:
        doc.add_heading('Analyse Budg√©taire', level=1)
        
        # R√©cup√©rer donn√©es budg√©taires globales
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            where_conditions = ["1=1"]
            params = []
            
            # Appliquer filtres
            if filters.get('types'):
                placeholders = ','.join('?' for _ in filters['types'])
                where_conditions.append(f"type_operation IN ({placeholders})")
                params.extend(filters['types'])
            
            query = f"""
                SELECT 
                    SUM(budget_initial) as budget_initial_total,
                    SUM(COALESCE(budget_final, budget_revise, budget_initial)) as budget_actuel_total,
                    COUNT(*) as nb_operations,
                    AVG(budget_initial) as budget_moyen
                FROM operations
                WHERE {' AND '.join(where_conditions)}
            """
            
            cursor.execute(query, params)
            budget_stats = dict(cursor.fetchone())
        
        if budget_stats:
            doc.add_paragraph(f"Budget initial total : {format_number_french(budget_stats.get('budget_initial_total', 0))}‚Ç¨")
            doc.add_paragraph(f"Budget actuel total : {format_number_french(budget_stats.get('budget_actuel_total', 0))}‚Ç¨")
            
            if budget_stats.get('budget_initial_total', 0) > 0:
                variation = budget_stats['budget_actuel_total'] - budget_stats['budget_initial_total']
                variation_pct = (variation / budget_stats['budget_initial_total']) * 100
                doc.add_paragraph(f"Variation budg√©taire : {variation_pct:+.1f}% ({format_number_french(variation):+}‚Ç¨)")
            
            doc.add_paragraph(f"Budget moyen par op√©ration : {format_number_french(budget_stats.get('budget_moyen', 0))}‚Ç¨")
    
    except Exception as e:
        logger.error(f"Erreur section budget: {e}")
        doc.add_paragraph(f"Erreur g√©n√©ration section budget: {e}")

def generate_alerts_word_section(doc, db_manager, filters: Dict, user_session: Dict):
    """Section alertes pour rapport personnalis√©"""
    
    try:
        doc.add_heading('Alertes et Surveillance', level=1)
        
        alerts = db_manager.get_active_alerts()
        
        if not alerts:
            doc.add_paragraph("Aucune alerte active.")
            return
        
        # Statistiques alertes
        alerts_by_level = {}
        for alert in alerts:
            level = alert.get('niveau_severite', 'MOYEN')
            if level not in alerts_by_level:
                alerts_by_level[level] = 0
            alerts_by_level[level] += 1
        
        doc.add_paragraph(f"Nombre total d'alertes actives : {len(alerts)}")
        
        for level in ['CRITIQUE', 'ELEVE', 'MOYEN', 'FAIBLE']:
            if level in alerts_by_level:
                doc.add_paragraph(f"  ‚Ä¢ {level} : {alerts_by_level[level]} alerte(s)", style='List Bullet')
        
        # D√©tail des alertes critiques
        critical_alerts = [a for a in alerts if a.get('niveau_severite') == 'CRITIQUE']
        
        if critical_alerts:
            doc.add_heading('Alertes Critiques', level=2)
            
            for alert in critical_alerts[:10]:  # Limiter √† 10
                doc.add_paragraph(
                    f"‚Ä¢ {alert.get('titre', 'Alerte')} - {alert.get('operation_nom', 'Op√©ration')}",
                    style='List Bullet'
                )
                if alert.get('description'):
                    doc.add_paragraph(f"  {alert['description']}")
    
    except Exception as e:
        logger.error(f"Erreur section alertes: {e}")
        doc.add_paragraph(f"Erreur g√©n√©ration section alertes: {e}")

def generate_stats_word_section(doc, db_manager, filters: Dict, user_session: Dict):
    """Section statistiques pour rapport personnalis√©"""
    
    try:
        doc.add_heading('Statistiques G√©n√©rales', level=1)
        
        # M√©triques dashboard
        dashboard_data = db_manager.get_operations_dashboard()
        
        if dashboard_data and dashboard_data.get('statistiques'):
            stats = dashboard_data['statistiques']
            
            doc.add_paragraph("Indicateurs cl√©s du portefeuille :")
            doc.add_paragraph(f"  ‚Ä¢ Total op√©rations : {stats.get('total_operations', 0)}", style='List Bullet')
            doc.add_paragraph(f"  ‚Ä¢ Op√©rations actives : {stats.get('operations_actives', 0)}", style='List Bullet')
            doc.add_paragraph(f"  ‚Ä¢ Op√©rations termin√©es : {stats.get('operations_terminees', 0)}", style='List Bullet')
            doc.add_paragraph(f"  ‚Ä¢ Op√©rations bloqu√©es : {stats.get('operations_bloquees', 0)}", style='List Bullet')
            doc.add_paragraph(f"  ‚Ä¢ Score de risque moyen : {stats.get('score_risque_moyen', 0):.1f}/100", style='List Bullet')
        
        # R√©partition par type
        if dashboard_data and dashboard_data.get('repartition_type'):
            doc.add_paragraph("")
            doc.add_paragraph("R√©partition par type d'op√©ration :")
            
            for op_type, count in dashboard_data['repartition_type'].items():
                doc.add_paragraph(f"  ‚Ä¢ {op_type} : {count} op√©ration(s)", style='List Bullet')
    
    except Exception as e:
        logger.error(f"Erreur section statistiques: {e}")
        doc.add_paragraph(f"Erreur g√©n√©ration section statistiques: {e}")

# Fonctions pour exports graphiques

def configure_graphic_export(graphic_type: str, db_utils: DatabaseUtils, user_session: Dict) -> Dict:
    """Configuration pour export graphique"""
    
    config = {"type": graphic_type}
    
    if graphic_type == "timeline_gantt":
        # S√©lection op√©ration pour Gantt
        operations_options = db_utils.get_operations_for_selectbox(user_session.get('user_id'))
        
        if operations_options:
            selected_op = st.selectbox(
                "Op√©ration pour diagramme de Gantt",
                options=list(operations_options.keys()),
                format_func=lambda x: operations_options[x],
                key="gantt_operation_select"
            )
            config["operation_id"] = selected_op
    
    elif graphic_type in ["budget_evolution", "rem_analysis"]:
        # P√©riode pour √©volution
        col1, col2 = st.columns(2)
        
        with col1:
            start_date = st.date_input(
                "Date de d√©but",
                value=date.today() - timedelta(days=365),
                key=f"{graphic_type}_start"
            )
        
        with col2:
            end_date = st.date_input(
                "Date de fin",
                value=date.today(),
                key=f"{graphic_type}_end"
            )
        
        config["date_range"] = [start_date, end_date]
    
    return config

def generate_graphic_preview(db_manager, graphic_type: str, graphic_config: Dict, user_session: Dict):
    """G√©n√©rer aper√ßu du graphique"""
    
    try:
        if graphic_type == "dashboard_metrics":
            dashboard_data = db_manager.get_operations_dashboard()
            if dashboard_data:
                return create_dashboard_metrics(dashboard_data)
        
        elif graphic_type == "risk_distribution":
            from modules.gestion_risques import get_risk_distribution, create_risk_distribution_chart
            risk_data = get_risk_distribution(db_manager, user_session.get('user_id'))
            if risk_data:
                return create_risk_distribution_chart(risk_data)
        
        elif graphic_type == "budget_evolution":
            # √âvolution budg√©taire globale
            budget_evolution = db_manager.get_operations_dashboard()
            if budget_evolution:
                return create_budget_evolution_chart([])  # Donn√©es simplifi√©es
        
        elif graphic_type == "timeline_gantt":
            operation_id = graphic_config.get('operation_id')
            if operation_id:
                phases = db_manager.get_phases_by_operation(operation_id)
                if phases:
                    return create_gantt_chart(phases)
        
        elif graphic_type == "alerts_summary":
            from modules.gestion_risques import get_alerts_by_type, create_alerts_by_type_chart
            alerts_data = get_alerts_by_type(db_manager, user_session.get('user_id'))
            if alerts_data:
                return create_alerts_by_type_chart(alerts_data)
        
        return None
    
    except Exception as e:
        logger.error(f"Erreur aper√ßu graphique {graphic_type}: {e}")
        return None

def export_graphic(db_manager, graphic_type: str, graphic_config: Dict, 
                  export_format: str, user_session: Dict) -> tuple:
    """Exporter graphique dans le format demand√©"""
    
    try:
        # G√©n√©rer le graphique
        fig = generate_graphic_preview(db_manager, graphic_type, graphic_config, user_session)
        
        if not fig:
            return None, None
        
        # Export selon format
        if export_format == "png":
            img_bytes = fig.to_image(format="png", width=1200, height=800, scale=2)
            filename = f"graphique_{graphic_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            return img_bytes, filename
        
        elif export_format == "pdf":
            img_bytes = fig.to_image(format="pdf", width=1200, height=800)
            filename = f"graphique_{graphic_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            return img_bytes, filename
        
        elif export_format == "svg":
            svg_bytes = fig.to_image(format="svg", width=1200, height=800)
            filename = f"graphique_{graphic_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.svg"
            return svg_bytes, filename
        
        elif export_format == "html":
            html_str = fig.to_html(include_plotlyjs='cdn')
            filename = f"graphique_{graphic_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            return html_str.encode('utf-8'), filename
        
        return None, None
    
    except Exception as e:
        logger.error(f"Erreur export graphique: {e}")
        return None, None

# Templates

def get_available_templates() -> List[Dict]:
    """Liste des templates disponibles"""
    
    return [
        {
            'id': 'template_1',
            'name': 'Rapport Op√©ration Standard',
            'type': 'operation',
            'format': 'word',
            'description': 'Rapport d√©taill√© pour une op√©ration',
            'sections': ['header', 'summary', 'phases', 'budget', 'risks'],
            'last_modified': '15/12/2024'
        },
        {
            'id': 'template_2', 
            'name': 'Synth√®se Portefeuille',
            'type': 'portfolio',
            'format': 'excel',
            'description': 'Vue d\'ensemble du portefeuille',
            'sections': ['operations', 'stats', 'charts'],
            'last_modified': '10/12/2024'
        },
        {
            'id': 'template_3',
            'name': 'Analyse Risques Ex√©cutif',
            'type': 'risks',
            'format': 'word',
            'description': 'Rapport risques pour direction',
            'sections': ['summary', 'top_risks', 'recommendations'],
            'last_modified': '08/12/2024'
        },
        {
            'id': 'template_4',
            'name': 'Tableau de Bord Financier',
            'type': 'financial',
            'format': 'excel',
            'description': 'Suivi budg√©taire et REM',
            'sections': ['budget_evolution', 'rem_summary', 'alerts'],
            'last_modified': '05/12/2024'
        }
    ]

def show_template_preview(template: Dict):
    """Afficher aper√ßu d'un template"""
    
    st.markdown(f"### üëÅÔ∏è Aper√ßu - {template['name']}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**Type:** {template['type']}")
        st.write(f"**Format:** {template['format'].upper()}")
        st.write(f"**Description:** {template['description']}")
    
    with col2:
        st.write("**Sections incluses:**")
        for section in template['sections']:
            section_names = {
                'header': 'üìÑ En-t√™te',
                'summary': 'üìã R√©sum√©',
                'operations': 'üèóÔ∏è Op√©rations',
                'phases': 'üéØ Phases',
                'budget': 'üí∞ Budget',
                'budget_evolution': 'üìà √âvolution Budget',
                'risks': 'üö® Risques',
                'top_risks': 'üèÜ TOP Risques',
                'stats': 'üìä Statistiques',
                'charts': 'üìà Graphiques',
                'alerts': '‚ö†Ô∏è Alertes',
                'rem_summary': 'üìà Synth√®se REM',
                'recommendations': 'üí° Recommandations'
            }
            
            section_name = section_names.get(section, section)
            st.write(f"‚Ä¢ {section_name}")
    
    # Exemple de contenu
    if template['type'] == 'operation':
        st.markdown("**Exemple de contenu:**")
        st.code("""
1. Informations G√©n√©rales
   - Nom de l'op√©ration
   - Type et statut
   - Budget et surface
   
2. Phases
   - Liste des phases avec statuts
   - Progression et retards
   
3. Analyse des Risques
   - Score de risque
   - Alertes actives
   
4. Suivi Budg√©taire
   - √âvolution du budget
   - √âcarts et justifications
        """, language=None)

def generate_custom_pdf_report(db_manager, report_config: Dict, user_session: Dict) -> tuple:
    """G√©n√©rer rapport PDF personnalis√© (via conversion Word)"""
    
    try:
        # Pour simplifier, utiliser la g√©n√©ration Word puis conversion
        word_data, word_filename = generate_custom_word_report(
            db_manager, report_config, user_session
        )
        
        if word_data:
            pdf_filename = word_filename.replace('.docx', '.pdf')
            
            # Dans une vraie application, conversion Word vers PDF
            # Utiliser python-docx2pdf, pandoc, ou LibreOffice en ligne de commande
            
            # Pour l'instant, retourner le Word comme PDF (simulation)
            return word_data, pdf_filename
        
        return None, None
    
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration PDF personnalis√©: {e}")
        return None, None
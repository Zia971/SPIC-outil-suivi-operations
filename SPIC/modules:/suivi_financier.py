"""
Module de suivi financier et REM SPIC 2.0
Gestion budgets, √©volution, REM par p√©riode, compl√©mentarit√© Gespro
Coh√©rent avec l'architecture refactoris√©e
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional
import logging

import config
from utils import *
from utils.form_utils import FormComponents
from utils.db_utils import DatabaseUtils
from utils.constants import UI_MESSAGES, CACHE_CONFIG

logger = logging.getLogger(__name__)

def show_suivi_financier(db_manager, user_session: Dict):
    """Interface principale de suivi financier"""
    
    st.header("üí∞ Suivi Financier")
    
    # Navigation par onglets (coh√©rent avec autres modules)
    tab1, tab2, tab3, tab4 = st.tabs([
        "üíµ Budgets Op√©rations",
        "üìà REM",
        "üìä Vue Portefeuille", 
        "‚ö†Ô∏è Alertes Budget"
    ])
    
    db_utils = DatabaseUtils(db_manager)
    
    with tab1:
        show_budgets_operations(db_manager, db_utils, user_session)
    
    with tab2:
        show_rem_management(db_manager, db_utils, user_session)
    
    with tab3:
        show_portfolio_financial_view(db_manager, db_utils, user_session)
    
    with tab4:
        show_budget_alerts(db_manager, db_utils, user_session)

def show_budgets_operations(db_manager, db_utils, user_session: Dict):
    """Gestion des budgets par op√©ration"""
    
    st.subheader("üíµ Gestion des Budgets")
    
    # S√©lection op√©ration
    operations_options = db_utils.get_operations_for_selectbox(user_session.get('user_id'))
    
    if not operations_options:
        st.warning("Aucune op√©ration disponible")
        return
    
    selected_op_id = st.selectbox(
        "S√©lectionner une op√©ration",
        options=list(operations_options.keys()),
        format_func=lambda x: operations_options[x],
        key="budget_operation_select"
    )
    
    if not selected_op_id:
        return
    
    # Informations op√©ration (coh√©rent avec timeline_view)
    operation = db_manager.get_operation(selected_op_id)
    
    if operation:
        with st.expander("‚ÑπÔ∏è Informations Op√©ration", expanded=True):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write(f"**Nom:** {operation['nom']}")
                st.write(f"**Type:** {operation['type_operation']}")
            
            with col2:
                st.write(f"**Statut:** {operation['statut_global']}")
                if operation.get('surface_m2'):
                    st.write(f"**Surface:** {format_number_french(operation['surface_m2'])} m¬≤")
            
            with col3:
                st.write(f"**Score Risque:** {operation.get('score_risque', 0)}/100")
                if operation.get('nb_logements'):
                    st.write(f"**Logements:** {operation['nb_logements']}")
    
    # Actions budg√©taires
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üí∞ √âvolution Budg√©taire")
    
    with col2:
        if st.button("‚ûï Nouveau Budget"):
            st.session_state['show_budget_form'] = True
    
    try:
        # R√©cup√©rer √©volution budg√©taire
        budget_evolution = db_manager.get_budget_evolution(selected_op_id)
        
        if budget_evolution:
            # Graphique √©volution (coh√©rent avec utils/)
            budget_fig = create_budget_evolution_chart(budget_evolution)
            st.plotly_chart(budget_fig, use_container_width=True)
            
            # M√©triques budg√©taires (coh√©rent avec autres vues)
            show_budget_metrics(budget_evolution, operation)
            
            # Table d√©taill√©e des budgets
            show_budget_details_table(budget_evolution)
        else:
            st.info("üìã Aucun historique budg√©taire disponible")
        
        # Formulaire nouveau budget
        if st.session_state.get('show_budget_form', False):
            show_budget_form(db_manager, selected_op_id, user_session)
    
    except Exception as e:
        logger.error(f"Erreur suivi budgets: {e}")
        FormComponents.alert_message(f"Erreur chargement budgets: {e}", "error")

def show_rem_management(db_manager, db_utils, user_session: Dict):
    """Gestion REM par op√©ration et globale"""
    
    st.subheader("üìà Gestion REM")
    
    # Vue par onglets REM
    rem_tab1, rem_tab2, rem_tab3 = st.tabs([
        "üéØ REM par Op√©ration",
        "üåê REM Globale",
        "‚ûï Nouvelle REM"
    ])
    
    with rem_tab1:
        show_rem_per_operation(db_manager, db_utils, user_session)
    
    with rem_tab2:
        show_global_rem_view(db_manager, db_utils, user_session)
    
    with rem_tab3:
        show_rem_form(db_manager, db_utils, user_session)

def show_rem_per_operation(db_manager, db_utils, user_session: Dict):
    """REM par op√©ration sp√©cifique"""
    
    # S√©lection op√©ration
    operations_options = db_utils.get_operations_for_selectbox(user_session.get('user_id'))
    
    if not operations_options:
        st.warning("Aucune op√©ration disponible")
        return
    
    selected_op_id = st.selectbox(
        "Op√©ration pour REM",
        options=list(operations_options.keys()),
        format_func=lambda x: operations_options[x],
        key="rem_operation_select"
    )
    
    if not selected_op_id:
        return
    
    try:
        # R√©cup√©rer REM de l'op√©ration
        rem_data = db_manager.get_rem_by_operation(selected_op_id)
        operation = db_manager.get_operation(selected_op_id)
        
        if rem_data:
            # M√©triques REM (coh√©rent avec autres m√©triques)
            show_rem_metrics(rem_data, operation)
            
            # Graphique √©volution REM
            rem_fig = create_rem_evolution_chart(rem_data)
            if rem_fig:
                st.plotly_chart(rem_fig, use_container_width=True)
            
            # Table REM
            show_rem_table(rem_data)
        else:
            st.info(f"üìã Aucune REM saisie pour cette op√©ration")
            
            if operation and operation.get('budget_initial'):
                st.info(f"üí° Budget initial: {format_number_french(operation['budget_initial'])}‚Ç¨")
    
    except Exception as e:
        logger.error(f"Erreur REM par op√©ration: {e}")
        FormComponents.alert_message(f"Erreur chargement REM: {e}", "error")

def show_global_rem_view(db_manager, db_utils, user_session: Dict):
    """Vue globale REM portefeuille"""
    
    st.markdown("#### üåê REM Globale du Portefeuille")
    
    # Filtres p√©riode
    col1, col2, col3 = st.columns(3)
    
    with col1:
        annee_filter = st.selectbox(
            "Ann√©e",
            options=list(range(datetime.now().year - 2, datetime.now().year + 2)),
            index=2,  # Ann√©e actuelle
            key="rem_global_year"
        )
    
    with col2:
        periode_filter = st.selectbox(
            "P√©riode",
            options=['Toutes', 'TRIMESTRE', 'SEMESTRE'],
            key="rem_global_period"
        )
    
    with col3:
        if st.button("üîÑ Actualiser REM"):
            st.cache_data.clear()
            st.experimental_rerun()
    
    try:
        # R√©cup√©rer REM globale
        global_rem_data = get_global_rem_data(
            db_manager, annee_filter, periode_filter, user_session.get('user_id')
        )
        
        if not global_rem_data:
            st.info("üìã Aucune REM trouv√©e pour les crit√®res s√©lectionn√©s")
            return
        
        # M√©triques globales
        show_global_rem_metrics(global_rem_data)
        
        # Graphiques REM globale
        col1, col2 = st.columns(2)
        
        with col1:
            # REM par op√©ration
            fig_ops = create_rem_by_operation_chart(global_rem_data)
            if fig_ops:
                st.plotly_chart(fig_ops, use_container_width=True)
        
        with col2:
            # REM par p√©riode
            fig_periods = create_rem_by_period_chart(global_rem_data)
            if fig_periods:
                st.plotly_chart(fig_periods, use_container_width=True)
        
        # Table r√©capitulative
        st.markdown("#### üìä R√©capitulatif REM")
        
        rem_summary = prepare_rem_summary_table(global_rem_data)
        if not rem_summary.empty:
            st.dataframe(
                rem_summary,
                column_config={
                    "operation_nom": "Op√©ration",
                    "total_rem": st.column_config.NumberColumn("Total REM", format="‚Ç¨%.0f"),
                    "pourcentage_moyen": st.column_config.NumberColumn("% Moyen", format="%.1f%%"),
                    "nb_saisies": "Nb Saisies",
                    "derniere_saisie": "Derni√®re Saisie"
                },
                hide_index=True,
                use_container_width=True
            )
    
    except Exception as e:
        logger.error(f"Erreur REM globale: {e}")
        FormComponents.alert_message(f"Erreur chargement REM globale: {e}", "error")

def show_rem_form(db_manager, db_utils, user_session: Dict):
    """Formulaire de saisie REM"""
    
    st.markdown("#### ‚ûï Nouvelle Saisie REM")
    
    # S√©lection op√©ration
    operations_options = db_utils.get_operations_for_selectbox(user_session.get('user_id'))
    
    if not operations_options:
        st.warning("Aucune op√©ration disponible")
        return
    
    selected_op_id = st.selectbox(
        "Op√©ration",
        options=list(operations_options.keys()),
        format_func=lambda x: operations_options[x],
        key="rem_form_operation_select"
    )
    
    if selected_op_id:
        # Afficher budget de r√©f√©rence
        operation = db_manager.get_operation(selected_op_id)
        if operation and operation.get('budget_initial'):
            st.info(f"üí∞ Budget initial: {format_number_french(operation['budget_initial'])}‚Ç¨")
        
        # Formulaire REM (coh√©rent avec form_utils)
        rem_data = FormComponents.rem_form(selected_op_id)
        
        if rem_data:
            try:
                rem_id = db_manager.add_rem(
                    selected_op_id,
                    rem_data['periode'],
                    rem_data['annee'],
                    rem_data['montant_rem'],
                    rem_data.get('trimestre'),
                    rem_data.get('semestre'),
                    rem_data.get('type_rem'),
                    rem_data.get('commentaire'),
                    user_session['user_id']
                )
                
                if rem_id:
                    FormComponents.alert_message(
                        f"REM de {format_number_french(rem_data['montant_rem'])}‚Ç¨ ajout√©e avec succ√®s !",
                        "success"
                    )
                    
                    # Actualiser cache
                    st.cache_data.clear()
                    
                    # Recalculer alertes budg√©taires
                    db_manager.generate_alerts(selected_op_id)
                else:
                    FormComponents.alert_message("Erreur lors de l'ajout de la REM", "error")
            
            except Exception as e:
                logger.error(f"Erreur ajout REM: {e}")
                FormComponents.alert_message(f"Erreur ajout REM: {e}", "error")

def show_portfolio_financial_view(db_manager, db_utils, user_session: Dict):
    """Vue financi√®re globale du portefeuille"""
    
    st.subheader("üìä Vue Financi√®re Portefeuille")
    
    try:
        # M√©triques portefeuille (coh√©rent avec dashboard)
        dashboard_data = db_utils.get_dashboard_metrics()
        
        if dashboard_data:
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                budget_info = dashboard_data.get('budget_total', {})
                create_metric_card(
                    "Budget Total",
                    budget_info.get('value', '‚Ç¨0'),
                    help_text="Budget total du portefeuille"
                )
            
            with col2:
                variation_info = dashboard_data.get('variation_budget', {})
                if variation_info:
                    create_metric_card(
                        "Variation Budget",
                        variation_info.get('value', '0%'),
                        delta=variation_info.get('delta'),
                        help_text="√âvolution vs budget initial"
                    )
            
            with col3:
                # Calculer total REM
                total_rem = calculate_total_rem_portfolio(db_manager, user_session.get('user_id'))
                create_metric_card(
                    "Total REM",
                    f"{format_number_french(total_rem)}‚Ç¨",
                    help_text="REM cumul√©e du portefeuille"
                )
            
            with col4:
                # Ratio REM/Budget
                if dashboard_data.get('statistiques', {}).get('budget_total_actuel', 0) > 0:
                    ratio_rem = (total_rem / dashboard_data['statistiques']['budget_total_actuel']) * 100
                    create_metric_card(
                        "Ratio REM/Budget",
                        f"{ratio_rem:.1f}%",
                        help_text="REM en % du budget total"
                    )
        
        # Graphiques portefeuille
        col1, col2 = st.columns(2)
        
        with col1:
            # R√©partition budgets par type d'op√©ration
            budget_by_type = get_budget_by_operation_type(db_manager, user_session.get('user_id'))
            if budget_by_type:
                fig_budget_type = create_budget_by_type_chart(budget_by_type)
                st.plotly_chart(fig_budget_type, use_container_width=True)
        
        with col2:
            # √âvolution budg√©taire globale
            global_budget_evolution = db_utils.get_budget_evolution_global()
            if global_budget_evolution and global_budget_evolution.get('evolution_mensuelle'):
                fig_evolution = create_budget_evolution_chart(global_budget_evolution['evolution_mensuelle'])
                st.plotly_chart(fig_evolution, use_container_width=True)
        
        # Top op√©rations par budget
        st.markdown("### üèÜ Top Op√©rations par Budget")
        
        top_operations = get_top_operations_by_budget(db_manager, user_session.get('user_id'))
        
        if top_operations:
            for i, op in enumerate(top_operations[:5], 1):
                with st.expander(f"#{i} - {op['nom']} ({format_number_french(op.get('budget_actuel', 0))}‚Ç¨)"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**Type:** {op['type_operation']}")
                        st.write(f"**Budget initial:** {format_number_french(op.get('budget_initial', 0))}‚Ç¨")
                    
                    with col2:
                        if op.get('budget_initial', 0) > 0:
                            variation = ((op.get('budget_actuel', 0) - op['budget_initial']) / op['budget_initial']) * 100
                            st.write(f"**Variation:** {variation:+.1f}%")
                        st.write(f"**Statut:** {op['statut_global']}")
    
    except Exception as e:
        logger.error(f"Erreur vue portefeuille financier: {e}")
        FormComponents.alert_message(f"Erreur chargement vue portefeuille: {e}", "error")

def show_budget_alerts(db_manager, db_utils, user_session: Dict):
    """Alertes et d√©passements budg√©taires"""
    
    st.subheader("‚ö†Ô∏è Alertes Budg√©taires")
    
    try:
        # G√©n√©rer alertes budg√©taires
        if st.button("üîÑ Actualiser les alertes budg√©taires"):
            with st.spinner("G√©n√©ration des alertes en cours..."):
                db_manager.generate_alerts()
                st.success("‚úÖ Alertes budg√©taires mises √† jour")
        
        # R√©cup√©rer alertes budg√©taires actives
        budget_alerts = get_budget_alerts(db_manager, user_session.get('user_id'))
        
        if not budget_alerts:
            st.success("‚úÖ Aucune alerte budg√©taire active")
            return
        
        # M√©triques alertes
        col1, col2, col3 = st.columns(3)
        
        with col1:
            create_metric_card(
                "Alertes Actives",
                len(budget_alerts),
                help_text="Nombre d'alertes budg√©taires actives"
            )
        
        with col2:
            critiques = len([a for a in budget_alerts if a.get('niveau_severite') == 'CRITIQUE'])
            create_metric_card(
                "Alertes Critiques",
                critiques,
                help_text="Alertes de niveau critique"
            )
        
        with col3:
            operations_concernees = len(set([a['operation_id'] for a in budget_alerts]))
            create_metric_card(
                "Op√©rations Concern√©es",
                operations_concernees,
                help_text="Nombre d'op√©rations avec alertes budget"
            )
        
        # Affichage des alertes
        st.markdown("### üö® D√©tail des Alertes")
        
        for alerte in budget_alerts:
            severity_color = {
                'CRITIQUE': '#F44336',
                'ELEVE': '#FF9800',
                'MOYEN': '#FFD54F'
            }.get(alerte.get('niveau_severite', 'MOYEN'), '#FFD54F')
            
            with st.expander(f"‚ö†Ô∏è {alerte.get('titre', 'Alerte budget')} - {alerte.get('operation_nom', 'Op√©ration')}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**Niveau:** {alerte.get('niveau_severite', 'MOYEN')}")
                    st.write(f"**Description:** {alerte.get('description', '')}")
                    st.write(f"**Date cr√©ation:** {alerte.get('date_creation', '')}")
                
                with col2:
                    # Bouton r√©solution
                    if st.button(f"‚úÖ R√©soudre", key=f"resolve_{alerte['id']}"):
                        if db_manager.resolve_alert(alerte['id'], user_session['user_id']):
                            st.success("Alerte r√©solue")
                            st.experimental_rerun()
                    
                    # Param√®tres alerte si disponibles
                    if alerte.get('parametres'):
                        try:
                            import json
                            params = json.loads(alerte['parametres'])
                            for key, value in params.items():
                                st.write(f"**{key}:** {value}")
                        except:
                            pass
    
    except Exception as e:
        logger.error(f"Erreur alertes budg√©taires: {e}")
        FormComponents.alert_message(f"Erreur chargement alertes: {e}", "error")

# Fonctions utilitaires coh√©rentes avec l'architecture

def show_budget_form(db_manager, operation_id: str, user_session: Dict):
    """Afficher formulaire budget (coh√©rent avec form_utils)"""
    
    st.markdown("#### ‚ûï Nouveau Budget")
    
    budget_data = FormComponents.budget_form(operation_id)
    
    if budget_data:
        try:
            budget_id = db_manager.add_budget(
                operation_id,
                budget_data['type_budget'],
                budget_data['montant'],
                budget_data['date_budget'],
                budget_data['justification'],
                user_session['user_id']
            )
            
            if budget_id:
                FormComponents.alert_message(
                    f"Budget {budget_data['type_budget']} ajout√© avec succ√®s !",
                    "success"
                )
                
                # Actualiser cache et recalculer alertes
                st.cache_data.clear()
                db_manager.generate_alerts(operation_id)
                
                # Masquer le formulaire
                st.session_state['show_budget_form'] = False
                st.experimental_rerun()
            else:
                FormComponents.alert_message("Erreur lors de l'ajout du budget", "error")
        
        except Exception as e:
            logger.error(f"Erreur ajout budget: {e}")
            FormComponents.alert_message(f"Erreur ajout budget: {e}", "error")
    
    # Bouton annuler
    if st.button("‚ùå Annuler"):
        st.session_state['show_budget_form'] = False
        st.experimental_rerun()

def show_budget_metrics(budget_evolution: List[Dict], operation: Dict):
    """Afficher m√©triques budg√©taires (coh√©rent avec autres m√©triques)"""
    
    if not budget_evolution:
        return
    
    # Calculer m√©triques
    budget_initial = next((b['montant'] for b in budget_evolution if b['type_budget'] == 'INITIAL'), 0)
    budget_final = next((b['montant'] for b in budget_evolution if b['type_budget'] == 'FINAL'), None)
    budget_revise = next((b['montant'] for b in budget_evolution if b['type_budget'] == 'REVISE'), None)
    
    budget_actuel = budget_final or budget_revise or budget_initial
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        create_metric_card(
            "Budget Initial",
            f"{format_number_french(budget_initial)}‚Ç¨",
            help_text="Budget initial de l'op√©ration"
        )
    
    with col2:
        create_metric_card(
            "Budget Actuel",
            f"{format_number_french(budget_actuel)}‚Ç¨",
            help_text="Dernier budget valid√©"
        )
    
    with col3:
        if budget_initial > 0:
            variation = budget_actuel - budget_initial
            variation_pct = (variation / budget_initial) * 100
            create_metric_card(
                "Variation",
                f"{variation_pct:+.1f}%",
                delta=f"{format_number_french(variation)}‚Ç¨",
                help_text="√âvolution vs budget initial"
            )
    
    with col4:
        nb_revisions = len([b for b in budget_evolution if b['type_budget'] in ['REVISE', 'FINAL']])
        create_metric_card(
            "Nb R√©visions",
            nb_revisions,
            help_text="Nombre de r√©visions budg√©taires"
        )

def show_budget_details_table(budget_evolution: List[Dict]):
    """Table d√©taill√©e des budgets"""
    
    df = pd.DataFrame(budget_evolution)
    df['date_budget'] = pd.to_datetime(df['date_budget']).dt.strftime('%d/%m/%Y')
    df['montant_format'] = df['montant'].apply(lambda x: f"{format_number_french(x)}‚Ç¨")
    
    # Type avec ic√¥ne
    type_icons = {'INITIAL': 'üèÅ', 'REVISE': 'üìù', 'FINAL': '‚úÖ'}
    df['type_display'] = df['type_budget'].map(lambda x: f"{type_icons.get(x, 'üí∞')} {x}")
    
    display_cols = ['date_budget', 'type_display', 'montant_format', 'justification']
    
    st.dataframe(
        df[display_cols],
        column_config={
            "date_budget": "Date",
            "type_display": "Type",
            "montant_format": "Montant",
            "justification": "Justification"
        },
        hide_index=True,
        use_container_width=True
    )

def show_rem_metrics(rem_data: List[Dict], operation: Dict):
    """M√©triques REM pour une op√©ration"""
    
    if not rem_data:
        return
    
    total_rem = sum(r.get('montant_rem', 0) for r in rem_data)
    budget_initial = operation.get('budget_initial', 0) if operation else 0
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        create_metric_card(
            "Total REM",
            f"{format_number_french(total_rem)}‚Ç¨",
            help_text="REM cumul√©e de l'op√©ration"
        )
    
    with col2:
        create_metric_card(
            "Nb Saisies",
            len(rem_data),
            help_text="Nombre de saisies REM"
        )
    
    with col3:
        if budget_initial > 0:
            ratio_rem = (total_rem / budget_initial) * 100
            create_metric_card(
                "% du Budget",
                f"{ratio_rem:.1f}%",
                help_text="REM en % du budget initial"
            )
    
    with col4:
        derniere_rem = max(rem_data, key=lambda x: x.get('date_saisie', ''))
        derniere_date = derniere_rem.get('date_saisie', '')[:10] if derniere_rem else ''
        create_metric_card(
            "Derni√®re REM",
            derniere_date,
            help_text="Date de la derni√®re saisie"
        )

def show_rem_table(rem_data: List[Dict]):
    """Table des REM"""
    
    df = pd.DataFrame(rem_data)
    df['date_saisie'] = pd.to_datetime(df['date_saisie']).dt.strftime('%d/%m/%Y')
    df['montant_format'] = df['montant_rem'].apply(lambda x: f"{format_number_french(x)}‚Ç¨")
    df['pourcentage_format'] = df['pourcentage_budget'].apply(lambda x: f"{x:.1f}%" if pd.notna(x) else "N/A")
    
    # P√©riode format√©e
    def format_periode(row):
        if row['periode'] == 'TRIMESTRE':
            return f"T{row.get('trimestre', '')} {row['annee']}"
        else:
            return f"S{row.get('semestre', '')} {row['annee']}"
    
    df['periode_format'] = df.apply(format_periode, axis=1)
    
    display_cols = ['periode_format', 'montant_format', 'pourcentage_format', 'type_rem', 'date_saisie']
    
    st.dataframe(
        df[display_cols],
        column_config={
            "periode_format": "P√©riode",
            "montant_format": "Montant REM",
            "pourcentage_format": "% Budget",
            "type_rem": "Type REM",
            "date_saisie": "Date Saisie"
        },
        hide_index=True,
        use_container_width=True
    )

# Fonctions de r√©cup√©ration des donn√©es

@st.cache_data(ttl=CACHE_CONFIG['dashboard'])
def get_global_rem_data(db_manager, annee: int, periode: str, user_id: str) -> List[Dict]:
    """R√©cup√©rer donn√©es REM globales"""
    
    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            where_conditions = ["r.annee = ?"]
            params = [annee]
            
            if periode != 'Toutes':
                where_conditions.append("r.periode = ?")
                params.append(periode)
            
            # Filtrer par droits utilisateur si n√©cessaire
            if user_id:
                where_conditions.append("""
                    (o.created_by = ? OR EXISTS (
                        SELECT 1 FROM droits_operations d 
                        WHERE d.operation_id = o.id AND d.utilisateur_id = ? AND d.actif = 1
                    ))
                """)
                params.extend([user_id, user_id])
            
            query = f"""
                SELECT r.*, o.nom as operation_nom, o.budget_initial
                FROM rem_operations r
                LEFT JOIN operations o ON r.operation_id = o.id
                WHERE {' AND '.join(where_conditions)}
                ORDER BY r.annee DESC, r.trimestre DESC, r.semestre DESC
            """
            
            cursor.execute(query, params)
            return [dict(row) for row in cursor.fetchall()]
            
    except Exception as e:
        logger.error(f"Erreur r√©cup√©ration REM globale: {e}")
        return []

@st.cache_data(ttl=CACHE_CONFIG['operations'])
def calculate_total_rem_portfolio(db_manager, user_id: str) -> float:
    """Calculer total REM du portefeuille"""
    
    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            where_conditions = ["1=1"]
            params = []
            
            if user_id:
                where_conditions.append("""
                    (o.created_by = ? OR EXISTS (
                        SELECT 1 FROM droits_operations d 
                        WHERE d.operation_id = o.id AND d.utilisateur_id = ? AND d.actif = 1
                    ))
                """)
                params.extend([user_id, user_id])
            
            query = f"""
                SELECT SUM(r.montant_rem) as total_rem
                FROM rem_operations r
                LEFT JOIN operations o ON r.operation_id = o.id
                WHERE {' AND '.join(where_conditions)}
            """
            
            cursor.execute(query, params)
            result = cursor.fetchone()
            return result['total_rem'] if result and result['total_rem'] else 0.0
            
    except Exception as e:
        logger.error(f"Erreur calcul total REM: {e}")
        return 0.0

@st.cache_data(ttl=CACHE_CONFIG['operations'])
def get_budget_by_operation_type(db_manager, user_id: str) -> List[Dict]:
    """R√©partition budgets par type d'op√©ration"""
    
    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            where_conditions = ["1=1"]
            params = []
            
            if user_id:
                where_conditions.append("""
                    (created_by = ? OR EXISTS (
                        SELECT 1 FROM droits_operations d 
                        WHERE d.operation_id = o.id AND d.utilisateur_id = ? AND d.actif = 1
                    ))
                """)
                params.extend([user_id, user_id])
            
            query = f"""
                SELECT 
                    type_operation,
                    SUM(budget_initial) as budget_initial_total,
                    SUM(COALESCE(budget_final, budget_revise, budget_initial)) as budget_actuel_total,
                    COUNT(*) as nb_operations
                FROM operations o
                WHERE {' AND '.join(where_conditions)}
                GROUP BY type_operation
                ORDER BY budget_actuel_total DESC
            """
            
            cursor.execute(query, params)
            return [dict(row) for row in cursor.fetchall()]
            
    except Exception as e:
        logger.error(f"Erreur budget par type: {e}")
        return []

@st.cache_data(ttl=CACHE_CONFIG['operations'])
def get_top_operations_by_budget(db_manager, user_id: str, limit: int = 10) -> List[Dict]:
    """Top op√©rations par budget"""
    
    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            where_conditions = ["1=1"]
            params = []
            
            if user_id:
                where_conditions.append("""
                    (created_by = ? OR EXISTS (
                        SELECT 1 FROM droits_operations d 
                        WHERE d.operation_id = o.id AND d.utilisateur_id = ? AND d.actif = 1
                    ))
                """)
                params.extend([user_id, user_id])
            
            query = f"""
                SELECT 
                    *,
                    COALESCE(budget_final, budget_revise, budget_initial) as budget_actuel
                FROM operations o
                WHERE {' AND '.join(where_conditions)}
                ORDER BY budget_actuel DESC
                LIMIT ?
            """
            
            params.append(limit)
            cursor.execute(query, params)
            return [dict(row) for row in cursor.fetchall()]
            
    except Exception as e:
        logger.error(f"Erreur top op√©rations budget: {e}")
        return []

@st.cache_data(ttl=CACHE_CONFIG['alerts'])
def get_budget_alerts(db_manager, user_id: str) -> List[Dict]:
    """R√©cup√©rer alertes budg√©taires actives"""
    
    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            where_conditions = ["a.actif = 1", "a.type_alerte = 'BUDGET'"]
            params = []
            
            if user_id:
                where_conditions.append("""
                    (o.created_by = ? OR EXISTS (
                        SELECT 1 FROM droits_operations d 
                        WHERE d.operation_id = o.id AND d.utilisateur_id = ? AND d.actif = 1
                    ))
                """)
                params.extend([user_id, user_id])
            
            query = f"""
                SELECT a.*, o.nom as operation_nom
                FROM alertes a
                LEFT JOIN operations o ON a.operation_id = o.id
                WHERE {' AND '.join(where_conditions)}
                ORDER BY a.niveau_severite DESC, a.date_creation DESC
            """
            
            cursor.execute(query, params)
            return [dict(row) for row in cursor.fetchall()]
            
    except Exception as e:
        logger.error(f"Erreur alertes budget: {e}")
        return []

def show_global_rem_metrics(global_rem_data: List[Dict]):
    """M√©triques REM globales"""
    
    if not global_rem_data:
        return
    
    total_rem = sum(r.get('montant_rem', 0) for r in global_rem_data)
    nb_operations = len(set(r['operation_id'] for r in global_rem_data))
    nb_saisies = len(global_rem_data)
    
    # Calculer moyenne par op√©ration
    moyenne_par_op = total_rem / nb_operations if nb_operations > 0 else 0
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        create_metric_card(
            "Total REM Global",
            f"{format_number_french(total_rem)}‚Ç¨",
            help_text="REM totale du portefeuille"
        )
    
    with col2:
        create_metric_card(
            "Op√©rations REM",
            nb_operations,
            help_text="Nombre d'op√©rations avec REM"
        )
    
    with col3:
        create_metric_card(
            "Total Saisies",
            nb_saisies,
            help_text="Nombre total de saisies REM"
        )
    
    with col4:
        create_metric_card(
            "Moyenne/Op√©ration",
            f"{format_number_french(moyenne_par_op)}‚Ç¨",
            help_text="REM moyenne par op√©ration"
        )

def prepare_rem_summary_table(global_rem_data: List[Dict]) -> pd.DataFrame:
    """Pr√©parer table r√©capitulative REM"""
    
    if not global_rem_data:
        return pd.DataFrame()
    
    df = pd.DataFrame(global_rem_data)
    
    # Grouper par op√©ration
    summary = df.groupby(['operation_id', 'operation_nom']).agg({
        'montant_rem': 'sum',
        'pourcentage_budget': 'mean',
        'date_saisie': ['count', 'max']
    }).round(1)
    
    summary.columns = ['total_rem', 'pourcentage_moyen', 'nb_saisies', 'derniere_saisie']
    summary = summary.reset_index()
    
    # Formater derni√®re saisie
    summary['derniere_saisie'] = pd.to_datetime(summary['derniere_saisie']).dt.strftime('%d/%m/%Y')
    
    return summary

# Fonctions de cr√©ation des graphiques (coh√©rentes avec utils/)

def create_rem_evolution_chart(rem_data: List[Dict]):
    """Graphique √©volution REM"""
    
    if not rem_data:
        return None
    
    df = pd.DataFrame(rem_data)
    df['date_saisie'] = pd.to_datetime(df['date_saisie'])
    df = df.sort_values('date_saisie')
    
    # Cr√©er p√©riode lisible
    def format_periode(row):
        if row['periode'] == 'TRIMESTRE':
            return f"T{row.get('trimestre', '')} {row['annee']}"
        else:
            return f"S{row.get('semestre', '')} {row['annee']}"
    
    df['periode_format'] = df.apply(format_periode, axis=1)
    
    fig = px.line(
        df, 
        x='periode_format', 
        y='montant_rem',
        title="√âvolution REM par P√©riode",
        markers=True,
        hover_data=['pourcentage_budget', 'type_rem']
    )
    
    fig.update_layout(
        xaxis_title="P√©riode",
        yaxis_title="Montant REM (‚Ç¨)",
        height=400
    )
    
    return fig

def create_rem_by_operation_chart(global_rem_data: List[Dict]):
    """Graphique REM par op√©ration"""
    
    if not global_rem_data:
        return None
    
    df = pd.DataFrame(global_rem_data)
    
    # Grouper par op√©ration
    rem_by_op = df.groupby(['operation_id', 'operation_nom'])['montant_rem'].sum().reset_index()
    rem_by_op = rem_by_op.sort_values('montant_rem', ascending=True).tail(10)
    
    fig = px.bar(
        rem_by_op,
        x='montant_rem',
        y='operation_nom',
        orientation='h',
        title="Top 10 REM par Op√©ration",
        color='montant_rem',
        color_continuous_scale='Blues'
    )
    
    fig.update_layout(
        xaxis_title="Montant REM (‚Ç¨)",
        yaxis_title="Op√©ration",
        height=400
    )
    
    return fig

def create_rem_by_period_chart(global_rem_data: List[Dict]):
    """Graphique REM par p√©riode"""
    
    if not global_rem_data:
        return None
    
    df = pd.DataFrame(global_rem_data)
    
    # Cr√©er cl√© p√©riode
    def create_period_key(row):
        if row['periode'] == 'TRIMESTRE':
            return f"{row['annee']}-T{row.get('trimestre', '')}"
        else:
            return f"{row['annee']}-S{row.get('semestre', '')}"
    
    df['periode_key'] = df.apply(create_period_key, axis=1)
    
    # Grouper par p√©riode
    rem_by_period = df.groupby('periode_key')['montant_rem'].sum().reset_index()
    rem_by_period = rem_by_period.sort_values('periode_key')
    
    fig = px.bar(
        rem_by_period,
        x='periode_key',
        y='montant_rem',
        title="REM par P√©riode",
        color='montant_rem',
        color_continuous_scale='Greens'
    )
    
    fig.update_layout(
        xaxis_title="P√©riode",
        yaxis_title="Montant REM (‚Ç¨)",
        height=400
    )
    
    return fig

def create_budget_by_type_chart(budget_data: List[Dict]):
    """Graphique budget par type d'op√©ration"""
    
    if not budget_data:
        return None
    
    df = pd.DataFrame(budget_data)
    
    fig = px.pie(
        df,
        values='budget_actuel_total',
        names='type_operation',
        title="R√©partition Budget par Type d'Op√©ration",
        color_discrete_map={
            'OPP': config.COULEURS_TIMELINE[0],
            'VEFA': config.COULEURS_TIMELINE[1],
            'AMO': config.COULEURS_TIMELINE[2],
            'MANDAT': config.COULEURS_TIMELINE[3]
        }
    )
    
    fig.update_traces(textinfo='percent+label')
    fig.update_layout(height=400)
    
    return fig